/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * Track
 * 
 * <p>A media consists of different media tracks, like video, audio, and subtitle, all combined.
 */
public class Track {

    /**
     * FastPix generates a unique identifier for each track.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Defines the type of input. This option is mandatory.
     */
    @JsonProperty("type")
    private String type;

    /**
     * Track width denotes the range of widths applicable to a specific track. Currently, this setting can be modified only for video tracks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<Double> width;

    /**
     * Track height denotes the range of height applicable to a specific track. Currently, this setting can be modified only for video tracks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<Double> height;

    /**
     * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameRate")
    private Optional<String> frameRate;

    /**
     * Indicates if the track contains closed captions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closedCaptions")
    private Optional<Boolean> closedCaptions;

    @JsonCreator
    public Track(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") String type,
            @JsonProperty("width") Optional<Double> width,
            @JsonProperty("height") Optional<Double> height,
            @JsonProperty("frameRate") Optional<String> frameRate,
            @JsonProperty("closedCaptions") Optional<Boolean> closedCaptions) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(frameRate, "frameRate");
        Utils.checkNotNull(closedCaptions, "closedCaptions");
        this.id = id;
        this.type = type;
        this.width = width;
        this.height = height;
        this.frameRate = frameRate;
        this.closedCaptions = closedCaptions;
    }
    
    public Track(
            String type) {
        this(Optional.empty(), type, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * FastPix generates a unique identifier for each track.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Defines the type of input. This option is mandatory.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * Track width denotes the range of widths applicable to a specific track. Currently, this setting can be modified only for video tracks
     */
    @JsonIgnore
    public Optional<Double> width() {
        return width;
    }

    /**
     * Track height denotes the range of height applicable to a specific track. Currently, this setting can be modified only for video tracks.
     */
    @JsonIgnore
    public Optional<Double> height() {
        return height;
    }

    /**
     * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
     */
    @JsonIgnore
    public Optional<String> frameRate() {
        return frameRate;
    }

    /**
     * Indicates if the track contains closed captions.
     */
    @JsonIgnore
    public Optional<Boolean> closedCaptions() {
        return closedCaptions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * FastPix generates a unique identifier for each track.
     */
    public Track withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * FastPix generates a unique identifier for each track.
     */
    public Track withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Defines the type of input. This option is mandatory.
     */
    public Track withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Track width denotes the range of widths applicable to a specific track. Currently, this setting can be modified only for video tracks
     */
    public Track withWidth(double width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    /**
     * Track width denotes the range of widths applicable to a specific track. Currently, this setting can be modified only for video tracks
     */
    public Track withWidth(Optional<Double> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    /**
     * Track height denotes the range of height applicable to a specific track. Currently, this setting can be modified only for video tracks.
     */
    public Track withHeight(double height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    /**
     * Track height denotes the range of height applicable to a specific track. Currently, this setting can be modified only for video tracks.
     */
    public Track withHeight(Optional<Double> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
     */
    public Track withFrameRate(String frameRate) {
        Utils.checkNotNull(frameRate, "frameRate");
        this.frameRate = Optional.ofNullable(frameRate);
        return this;
    }

    /**
     * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
     */
    public Track withFrameRate(Optional<String> frameRate) {
        Utils.checkNotNull(frameRate, "frameRate");
        this.frameRate = frameRate;
        return this;
    }

    /**
     * Indicates if the track contains closed captions.
     */
    public Track withClosedCaptions(boolean closedCaptions) {
        Utils.checkNotNull(closedCaptions, "closedCaptions");
        this.closedCaptions = Optional.ofNullable(closedCaptions);
        return this;
    }

    /**
     * Indicates if the track contains closed captions.
     */
    public Track withClosedCaptions(Optional<Boolean> closedCaptions) {
        Utils.checkNotNull(closedCaptions, "closedCaptions");
        this.closedCaptions = closedCaptions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Track other = (Track) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.width, other.width) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.frameRate, other.frameRate) &&
            Objects.deepEquals(this.closedCaptions, other.closedCaptions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            type,
            width,
            height,
            frameRate,
            closedCaptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Track.class,
                "id", id,
                "type", type,
                "width", width,
                "height", height,
                "frameRate", frameRate,
                "closedCaptions", closedCaptions);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String type;
 
        private Optional<Double> width = Optional.empty();
 
        private Optional<Double> height = Optional.empty();
 
        private Optional<String> frameRate = Optional.empty();
 
        private Optional<Boolean> closedCaptions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * FastPix generates a unique identifier for each track.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * FastPix generates a unique identifier for each track.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Defines the type of input. This option is mandatory.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Track width denotes the range of widths applicable to a specific track. Currently, this setting can be modified only for video tracks
         */
        public Builder width(double width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        /**
         * Track width denotes the range of widths applicable to a specific track. Currently, this setting can be modified only for video tracks
         */
        public Builder width(Optional<Double> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        /**
         * Track height denotes the range of height applicable to a specific track. Currently, this setting can be modified only for video tracks.
         */
        public Builder height(double height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        /**
         * Track height denotes the range of height applicable to a specific track. Currently, this setting can be modified only for video tracks.
         */
        public Builder height(Optional<Double> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
         */
        public Builder frameRate(String frameRate) {
            Utils.checkNotNull(frameRate, "frameRate");
            this.frameRate = Optional.ofNullable(frameRate);
            return this;
        }

        /**
         * Frame rate quantifies the speed at which frames are displayed per second. It represents the range of frames available for a specific track. If the frame rate of the input file is indeterminable, it will be indicated by a value of -1.
         */
        public Builder frameRate(Optional<String> frameRate) {
            Utils.checkNotNull(frameRate, "frameRate");
            this.frameRate = frameRate;
            return this;
        }

        /**
         * Indicates if the track contains closed captions.
         */
        public Builder closedCaptions(boolean closedCaptions) {
            Utils.checkNotNull(closedCaptions, "closedCaptions");
            this.closedCaptions = Optional.ofNullable(closedCaptions);
            return this;
        }

        /**
         * Indicates if the track contains closed captions.
         */
        public Builder closedCaptions(Optional<Boolean> closedCaptions) {
            Utils.checkNotNull(closedCaptions, "closedCaptions");
            this.closedCaptions = closedCaptions;
            return this;
        }
        
        public Track build() {
            return new Track(
                id,
                type,
                width,
                height,
                frameRate,
                closedCaptions);
        }
    }
}
