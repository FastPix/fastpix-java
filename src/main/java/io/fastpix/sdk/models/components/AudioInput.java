/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class AudioInput {

    /**
     * Type of overlay (currently only supports 'audio').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AudioInputType> type;

    /**
     * URL of the audio track to replace the existing audio in the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("swapTrackUrl")
    private Optional<String> swapTrackUrl;

    /**
     * List of additional audio tracks to overlay on the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imposeTracks")
    private Optional<? extends List<ImposeTrack>> imposeTracks;

    @JsonCreator
    public AudioInput(
            @JsonProperty("type") Optional<? extends AudioInputType> type,
            @JsonProperty("swapTrackUrl") Optional<String> swapTrackUrl,
            @JsonProperty("imposeTracks") Optional<? extends List<ImposeTrack>> imposeTracks) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(swapTrackUrl, "swapTrackUrl");
        Utils.checkNotNull(imposeTracks, "imposeTracks");
        this.type = type;
        this.swapTrackUrl = swapTrackUrl;
        this.imposeTracks = imposeTracks;
    }
    
    public AudioInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Type of overlay (currently only supports 'audio').
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AudioInputType> type() {
        return (Optional<AudioInputType>) type;
    }

    /**
     * URL of the audio track to replace the existing audio in the video.
     */
    @JsonIgnore
    public Optional<String> swapTrackUrl() {
        return swapTrackUrl;
    }

    /**
     * List of additional audio tracks to overlay on the video.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ImposeTrack>> imposeTracks() {
        return (Optional<List<ImposeTrack>>) imposeTracks;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Type of overlay (currently only supports 'audio').
     */
    public AudioInput withType(AudioInputType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of overlay (currently only supports 'audio').
     */
    public AudioInput withType(Optional<? extends AudioInputType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * URL of the audio track to replace the existing audio in the video.
     */
    public AudioInput withSwapTrackUrl(String swapTrackUrl) {
        Utils.checkNotNull(swapTrackUrl, "swapTrackUrl");
        this.swapTrackUrl = Optional.ofNullable(swapTrackUrl);
        return this;
    }

    /**
     * URL of the audio track to replace the existing audio in the video.
     */
    public AudioInput withSwapTrackUrl(Optional<String> swapTrackUrl) {
        Utils.checkNotNull(swapTrackUrl, "swapTrackUrl");
        this.swapTrackUrl = swapTrackUrl;
        return this;
    }

    /**
     * List of additional audio tracks to overlay on the video.
     */
    public AudioInput withImposeTracks(List<ImposeTrack> imposeTracks) {
        Utils.checkNotNull(imposeTracks, "imposeTracks");
        this.imposeTracks = Optional.ofNullable(imposeTracks);
        return this;
    }

    /**
     * List of additional audio tracks to overlay on the video.
     */
    public AudioInput withImposeTracks(Optional<? extends List<ImposeTrack>> imposeTracks) {
        Utils.checkNotNull(imposeTracks, "imposeTracks");
        this.imposeTracks = imposeTracks;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudioInput other = (AudioInput) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.swapTrackUrl, other.swapTrackUrl) &&
            Objects.deepEquals(this.imposeTracks, other.imposeTracks);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            swapTrackUrl,
            imposeTracks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AudioInput.class,
                "type", type,
                "swapTrackUrl", swapTrackUrl,
                "imposeTracks", imposeTracks);
    }
    
    public final static class Builder {
 
        private Optional<? extends AudioInputType> type = Optional.empty();
 
        private Optional<String> swapTrackUrl = Optional.empty();
 
        private Optional<? extends List<ImposeTrack>> imposeTracks = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of overlay (currently only supports 'audio').
         */
        public Builder type(AudioInputType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of overlay (currently only supports 'audio').
         */
        public Builder type(Optional<? extends AudioInputType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * URL of the audio track to replace the existing audio in the video.
         */
        public Builder swapTrackUrl(String swapTrackUrl) {
            Utils.checkNotNull(swapTrackUrl, "swapTrackUrl");
            this.swapTrackUrl = Optional.ofNullable(swapTrackUrl);
            return this;
        }

        /**
         * URL of the audio track to replace the existing audio in the video.
         */
        public Builder swapTrackUrl(Optional<String> swapTrackUrl) {
            Utils.checkNotNull(swapTrackUrl, "swapTrackUrl");
            this.swapTrackUrl = swapTrackUrl;
            return this;
        }

        /**
         * List of additional audio tracks to overlay on the video.
         */
        public Builder imposeTracks(List<ImposeTrack> imposeTracks) {
            Utils.checkNotNull(imposeTracks, "imposeTracks");
            this.imposeTracks = Optional.ofNullable(imposeTracks);
            return this;
        }

        /**
         * List of additional audio tracks to overlay on the video.
         */
        public Builder imposeTracks(Optional<? extends List<ImposeTrack>> imposeTracks) {
            Utils.checkNotNull(imposeTracks, "imposeTracks");
            this.imposeTracks = imposeTracks;
            return this;
        }
        
        public AudioInput build() {
            return new AudioInput(
                type,
                swapTrackUrl,
                imposeTracks);
        }
    }
}
