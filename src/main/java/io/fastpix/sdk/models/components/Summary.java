/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Summary {

    /**
     * Enable or disable the summary feature for the media. Set to true to enable summary or false to disable.
     */
    @JsonProperty("generate")
    private boolean generate;

    /**
     * Specifies the desired word count for the generated summary. 
     * - The value must be between **30** and **250** words.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summaryLength")
    private Optional<Long> summaryLength;

    @JsonCreator
    public Summary(
            @JsonProperty("generate") boolean generate,
            @JsonProperty("summaryLength") Optional<Long> summaryLength) {
        Utils.checkNotNull(generate, "generate");
        Utils.checkNotNull(summaryLength, "summaryLength");
        this.generate = generate;
        this.summaryLength = summaryLength;
    }
    
    public Summary(
            boolean generate) {
        this(generate, Optional.empty());
    }

    /**
     * Enable or disable the summary feature for the media. Set to true to enable summary or false to disable.
     */
    @JsonIgnore
    public boolean generate() {
        return generate;
    }

    /**
     * Specifies the desired word count for the generated summary. 
     * - The value must be between **30** and **250** words.
     */
    @JsonIgnore
    public Optional<Long> summaryLength() {
        return summaryLength;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Enable or disable the summary feature for the media. Set to true to enable summary or false to disable.
     */
    public Summary withGenerate(boolean generate) {
        Utils.checkNotNull(generate, "generate");
        this.generate = generate;
        return this;
    }

    /**
     * Specifies the desired word count for the generated summary. 
     * - The value must be between **30** and **250** words.
     */
    public Summary withSummaryLength(long summaryLength) {
        Utils.checkNotNull(summaryLength, "summaryLength");
        this.summaryLength = Optional.ofNullable(summaryLength);
        return this;
    }

    /**
     * Specifies the desired word count for the generated summary. 
     * - The value must be between **30** and **250** words.
     */
    public Summary withSummaryLength(Optional<Long> summaryLength) {
        Utils.checkNotNull(summaryLength, "summaryLength");
        this.summaryLength = summaryLength;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Summary other = (Summary) o;
        return 
            Objects.deepEquals(this.generate, other.generate) &&
            Objects.deepEquals(this.summaryLength, other.summaryLength);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            generate,
            summaryLength);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Summary.class,
                "generate", generate,
                "summaryLength", summaryLength);
    }
    
    public final static class Builder {
 
        private Boolean generate;
 
        private Optional<Long> summaryLength;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Enable or disable the summary feature for the media. Set to true to enable summary or false to disable.
         */
        public Builder generate(boolean generate) {
            Utils.checkNotNull(generate, "generate");
            this.generate = generate;
            return this;
        }

        /**
         * Specifies the desired word count for the generated summary. 
         * - The value must be between **30** and **250** words.
         */
        public Builder summaryLength(long summaryLength) {
            Utils.checkNotNull(summaryLength, "summaryLength");
            this.summaryLength = Optional.ofNullable(summaryLength);
            return this;
        }

        /**
         * Specifies the desired word count for the generated summary. 
         * - The value must be between **30** and **250** words.
         */
        public Builder summaryLength(Optional<Long> summaryLength) {
            Utils.checkNotNull(summaryLength, "summaryLength");
            this.summaryLength = summaryLength;
            return this;
        }
        
        public Summary build() {
            if (summaryLength == null) {
                summaryLength = _SINGLETON_VALUE_SummaryLength.value();
            }
            return new Summary(
                generate,
                summaryLength);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_SummaryLength =
                new LazySingletonValue<>(
                        "summaryLength",
                        "100",
                        new TypeReference<Optional<Long>>() {});
    }
}
