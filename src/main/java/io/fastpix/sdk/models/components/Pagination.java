/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * Pagination
 * 
 * <p>Pagination organizes content into pages for better readability and navigation.
 */
public class Pagination {

    /**
     * It gives the total number of media assets that are accessible overall.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalRecords")
    private Optional<Long> totalRecords;

    /**
     * Determines the current point for data retrieval within a paginated list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentOffset")
    private Optional<Long> currentOffset;

    /**
     * The offset count is expressed as total records by limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offsetCount")
    private Optional<Long> offsetCount;

    @JsonCreator
    public Pagination(
            @JsonProperty("totalRecords") Optional<Long> totalRecords,
            @JsonProperty("currentOffset") Optional<Long> currentOffset,
            @JsonProperty("offsetCount") Optional<Long> offsetCount) {
        Utils.checkNotNull(totalRecords, "totalRecords");
        Utils.checkNotNull(currentOffset, "currentOffset");
        Utils.checkNotNull(offsetCount, "offsetCount");
        this.totalRecords = totalRecords;
        this.currentOffset = currentOffset;
        this.offsetCount = offsetCount;
    }
    
    public Pagination() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * It gives the total number of media assets that are accessible overall.
     */
    @JsonIgnore
    public Optional<Long> totalRecords() {
        return totalRecords;
    }

    /**
     * Determines the current point for data retrieval within a paginated list.
     */
    @JsonIgnore
    public Optional<Long> currentOffset() {
        return currentOffset;
    }

    /**
     * The offset count is expressed as total records by limit.
     */
    @JsonIgnore
    public Optional<Long> offsetCount() {
        return offsetCount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * It gives the total number of media assets that are accessible overall.
     */
    public Pagination withTotalRecords(long totalRecords) {
        Utils.checkNotNull(totalRecords, "totalRecords");
        this.totalRecords = Optional.ofNullable(totalRecords);
        return this;
    }

    /**
     * It gives the total number of media assets that are accessible overall.
     */
    public Pagination withTotalRecords(Optional<Long> totalRecords) {
        Utils.checkNotNull(totalRecords, "totalRecords");
        this.totalRecords = totalRecords;
        return this;
    }

    /**
     * Determines the current point for data retrieval within a paginated list.
     */
    public Pagination withCurrentOffset(long currentOffset) {
        Utils.checkNotNull(currentOffset, "currentOffset");
        this.currentOffset = Optional.ofNullable(currentOffset);
        return this;
    }

    /**
     * Determines the current point for data retrieval within a paginated list.
     */
    public Pagination withCurrentOffset(Optional<Long> currentOffset) {
        Utils.checkNotNull(currentOffset, "currentOffset");
        this.currentOffset = currentOffset;
        return this;
    }

    /**
     * The offset count is expressed as total records by limit.
     */
    public Pagination withOffsetCount(long offsetCount) {
        Utils.checkNotNull(offsetCount, "offsetCount");
        this.offsetCount = Optional.ofNullable(offsetCount);
        return this;
    }

    /**
     * The offset count is expressed as total records by limit.
     */
    public Pagination withOffsetCount(Optional<Long> offsetCount) {
        Utils.checkNotNull(offsetCount, "offsetCount");
        this.offsetCount = offsetCount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pagination other = (Pagination) o;
        return 
            Objects.deepEquals(this.totalRecords, other.totalRecords) &&
            Objects.deepEquals(this.currentOffset, other.currentOffset) &&
            Objects.deepEquals(this.offsetCount, other.offsetCount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            totalRecords,
            currentOffset,
            offsetCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Pagination.class,
                "totalRecords", totalRecords,
                "currentOffset", currentOffset,
                "offsetCount", offsetCount);
    }
    
    public final static class Builder {
 
        private Optional<Long> totalRecords = Optional.empty();
 
        private Optional<Long> currentOffset = Optional.empty();
 
        private Optional<Long> offsetCount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * It gives the total number of media assets that are accessible overall.
         */
        public Builder totalRecords(long totalRecords) {
            Utils.checkNotNull(totalRecords, "totalRecords");
            this.totalRecords = Optional.ofNullable(totalRecords);
            return this;
        }

        /**
         * It gives the total number of media assets that are accessible overall.
         */
        public Builder totalRecords(Optional<Long> totalRecords) {
            Utils.checkNotNull(totalRecords, "totalRecords");
            this.totalRecords = totalRecords;
            return this;
        }

        /**
         * Determines the current point for data retrieval within a paginated list.
         */
        public Builder currentOffset(long currentOffset) {
            Utils.checkNotNull(currentOffset, "currentOffset");
            this.currentOffset = Optional.ofNullable(currentOffset);
            return this;
        }

        /**
         * Determines the current point for data retrieval within a paginated list.
         */
        public Builder currentOffset(Optional<Long> currentOffset) {
            Utils.checkNotNull(currentOffset, "currentOffset");
            this.currentOffset = currentOffset;
            return this;
        }

        /**
         * The offset count is expressed as total records by limit.
         */
        public Builder offsetCount(long offsetCount) {
            Utils.checkNotNull(offsetCount, "offsetCount");
            this.offsetCount = Optional.ofNullable(offsetCount);
            return this;
        }

        /**
         * The offset count is expressed as total records by limit.
         */
        public Builder offsetCount(Optional<Long> offsetCount) {
            Utils.checkNotNull(offsetCount, "offsetCount");
            this.offsetCount = offsetCount;
            return this;
        }
        
        public Pagination build() {
            return new Pagination(
                totalRecords,
                currentOffset,
                offsetCount);
        }
    }
}
