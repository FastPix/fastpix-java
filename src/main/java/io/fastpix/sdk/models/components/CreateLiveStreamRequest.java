/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CreateLiveStreamRequest {

    /**
     * Displays the result of the playback settings.
     */
    @JsonProperty("playbackSettings")
    private PlaybackSettings playbackSettings;

    /**
     * Displays the result of the input Media settings.
     */
    @JsonProperty("inputMediaSettings")
    private InputMediaSettings inputMediaSettings;

    @JsonCreator
    public CreateLiveStreamRequest(
            @JsonProperty("playbackSettings") PlaybackSettings playbackSettings,
            @JsonProperty("inputMediaSettings") InputMediaSettings inputMediaSettings) {
        Utils.checkNotNull(playbackSettings, "playbackSettings");
        Utils.checkNotNull(inputMediaSettings, "inputMediaSettings");
        this.playbackSettings = playbackSettings;
        this.inputMediaSettings = inputMediaSettings;
    }

    /**
     * Displays the result of the playback settings.
     */
    @JsonIgnore
    public PlaybackSettings playbackSettings() {
        return playbackSettings;
    }

    /**
     * Displays the result of the input Media settings.
     */
    @JsonIgnore
    public InputMediaSettings inputMediaSettings() {
        return inputMediaSettings;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Displays the result of the playback settings.
     */
    public CreateLiveStreamRequest withPlaybackSettings(PlaybackSettings playbackSettings) {
        Utils.checkNotNull(playbackSettings, "playbackSettings");
        this.playbackSettings = playbackSettings;
        return this;
    }

    /**
     * Displays the result of the input Media settings.
     */
    public CreateLiveStreamRequest withInputMediaSettings(InputMediaSettings inputMediaSettings) {
        Utils.checkNotNull(inputMediaSettings, "inputMediaSettings");
        this.inputMediaSettings = inputMediaSettings;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateLiveStreamRequest other = (CreateLiveStreamRequest) o;
        return 
            Objects.deepEquals(this.playbackSettings, other.playbackSettings) &&
            Objects.deepEquals(this.inputMediaSettings, other.inputMediaSettings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            playbackSettings,
            inputMediaSettings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateLiveStreamRequest.class,
                "playbackSettings", playbackSettings,
                "inputMediaSettings", inputMediaSettings);
    }
    
    public final static class Builder {
 
        private PlaybackSettings playbackSettings;
 
        private InputMediaSettings inputMediaSettings;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Displays the result of the playback settings.
         */
        public Builder playbackSettings(PlaybackSettings playbackSettings) {
            Utils.checkNotNull(playbackSettings, "playbackSettings");
            this.playbackSettings = playbackSettings;
            return this;
        }

        /**
         * Displays the result of the input Media settings.
         */
        public Builder inputMediaSettings(InputMediaSettings inputMediaSettings) {
            Utils.checkNotNull(inputMediaSettings, "inputMediaSettings");
            this.inputMediaSettings = inputMediaSettings;
            return this;
        }
        
        public CreateLiveStreamRequest build() {
            return new CreateLiveStreamRequest(
                playbackSettings,
                inputMediaSettings);
        }
    }
}
