/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * SimulcastResponseData
 * 
 * <p>Displays the result of the request.
 */
public class SimulcastResponseData {

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulcastId")
    private Optional<String> simulcastId;

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamKey")
    private Optional<String> streamKey;

    /**
     * When the value is true, the simulcast will be enabled for the given stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEnabled")
    private Optional<Boolean> isEnabled;

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends SimulcastResponseMetadata> metadata;

    @JsonCreator
    public SimulcastResponseData(
            @JsonProperty("simulcastId") Optional<String> simulcastId,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("streamKey") Optional<String> streamKey,
            @JsonProperty("isEnabled") Optional<Boolean> isEnabled,
            @JsonProperty("metadata") Optional<? extends SimulcastResponseMetadata> metadata) {
        Utils.checkNotNull(simulcastId, "simulcastId");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(streamKey, "streamKey");
        Utils.checkNotNull(isEnabled, "isEnabled");
        Utils.checkNotNull(metadata, "metadata");
        this.simulcastId = simulcastId;
        this.url = url;
        this.streamKey = streamKey;
        this.isEnabled = isEnabled;
        this.metadata = metadata;
    }
    
    public SimulcastResponseData() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    @JsonIgnore
    public Optional<String> simulcastId() {
        return simulcastId;
    }

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    @JsonIgnore
    public Optional<String> streamKey() {
        return streamKey;
    }

    /**
     * When the value is true, the simulcast will be enabled for the given stream
     */
    @JsonIgnore
    public Optional<Boolean> isEnabled() {
        return isEnabled;
    }

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimulcastResponseMetadata> metadata() {
        return (Optional<SimulcastResponseMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    public SimulcastResponseData withSimulcastId(String simulcastId) {
        Utils.checkNotNull(simulcastId, "simulcastId");
        this.simulcastId = Optional.ofNullable(simulcastId);
        return this;
    }

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    public SimulcastResponseData withSimulcastId(Optional<String> simulcastId) {
        Utils.checkNotNull(simulcastId, "simulcastId");
        this.simulcastId = simulcastId;
        return this;
    }

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    public SimulcastResponseData withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    public SimulcastResponseData withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    public SimulcastResponseData withStreamKey(String streamKey) {
        Utils.checkNotNull(streamKey, "streamKey");
        this.streamKey = Optional.ofNullable(streamKey);
        return this;
    }

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    public SimulcastResponseData withStreamKey(Optional<String> streamKey) {
        Utils.checkNotNull(streamKey, "streamKey");
        this.streamKey = streamKey;
        return this;
    }

    /**
     * When the value is true, the simulcast will be enabled for the given stream
     */
    public SimulcastResponseData withIsEnabled(boolean isEnabled) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        this.isEnabled = Optional.ofNullable(isEnabled);
        return this;
    }

    /**
     * When the value is true, the simulcast will be enabled for the given stream
     */
    public SimulcastResponseData withIsEnabled(Optional<Boolean> isEnabled) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    public SimulcastResponseData withMetadata(SimulcastResponseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    public SimulcastResponseData withMetadata(Optional<? extends SimulcastResponseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimulcastResponseData other = (SimulcastResponseData) o;
        return 
            Objects.deepEquals(this.simulcastId, other.simulcastId) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.streamKey, other.streamKey) &&
            Objects.deepEquals(this.isEnabled, other.isEnabled) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            simulcastId,
            url,
            streamKey,
            isEnabled,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimulcastResponseData.class,
                "simulcastId", simulcastId,
                "url", url,
                "streamKey", streamKey,
                "isEnabled", isEnabled,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<String> simulcastId = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> streamKey = Optional.empty();
 
        private Optional<Boolean> isEnabled = Optional.empty();
 
        private Optional<? extends SimulcastResponseMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
         */
        public Builder simulcastId(String simulcastId) {
            Utils.checkNotNull(simulcastId, "simulcastId");
            this.simulcastId = Optional.ofNullable(simulcastId);
            return this;
        }

        /**
         * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
         */
        public Builder simulcastId(Optional<String> simulcastId) {
            Utils.checkNotNull(simulcastId, "simulcastId");
            this.simulcastId = simulcastId;
            return this;
        }

        /**
         * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
         */
        public Builder streamKey(String streamKey) {
            Utils.checkNotNull(streamKey, "streamKey");
            this.streamKey = Optional.ofNullable(streamKey);
            return this;
        }

        /**
         * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
         */
        public Builder streamKey(Optional<String> streamKey) {
            Utils.checkNotNull(streamKey, "streamKey");
            this.streamKey = streamKey;
            return this;
        }

        /**
         * When the value is true, the simulcast will be enabled for the given stream
         */
        public Builder isEnabled(boolean isEnabled) {
            Utils.checkNotNull(isEnabled, "isEnabled");
            this.isEnabled = Optional.ofNullable(isEnabled);
            return this;
        }

        /**
         * When the value is true, the simulcast will be enabled for the given stream
         */
        public Builder isEnabled(Optional<Boolean> isEnabled) {
            Utils.checkNotNull(isEnabled, "isEnabled");
            this.isEnabled = isEnabled;
            return this;
        }

        /**
         * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
         */
        public Builder metadata(SimulcastResponseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
         */
        public Builder metadata(Optional<? extends SimulcastResponseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public SimulcastResponseData build() {
            return new SimulcastResponseData(
                simulcastId,
                url,
                streamKey,
                isEnabled,
                metadata);
        }
    }
}
