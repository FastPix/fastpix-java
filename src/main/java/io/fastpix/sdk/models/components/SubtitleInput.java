/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * SubtitleInput
 * 
 * <p>Generates subtitle files for audio/video files.
 */
public class SubtitleInput {

    /**
     * Defines the type of input.
     */
    @JsonProperty("type")
    private String type;

    /**
     * The direct URL of the subtitle file.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Name of the language in which the subtitles will be generated.
     */
    @JsonProperty("languageName")
    private String languageName;

    /**
     * The BCP 47 language code representing the language of the generated track.
     */
    @JsonProperty("languageCode")
    private SubtitleInputLanguageCode languageCode;

    @JsonCreator
    public SubtitleInput(
            @JsonProperty("type") String type,
            @JsonProperty("url") String url,
            @JsonProperty("languageName") String languageName,
            @JsonProperty("languageCode") SubtitleInputLanguageCode languageCode) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(languageName, "languageName");
        Utils.checkNotNull(languageCode, "languageCode");
        this.type = type;
        this.url = url;
        this.languageName = languageName;
        this.languageCode = languageCode;
    }

    /**
     * Defines the type of input.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * The direct URL of the subtitle file.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Name of the language in which the subtitles will be generated.
     */
    @JsonIgnore
    public String languageName() {
        return languageName;
    }

    /**
     * The BCP 47 language code representing the language of the generated track.
     */
    @JsonIgnore
    public SubtitleInputLanguageCode languageCode() {
        return languageCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Defines the type of input.
     */
    public SubtitleInput withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The direct URL of the subtitle file.
     */
    public SubtitleInput withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Name of the language in which the subtitles will be generated.
     */
    public SubtitleInput withLanguageName(String languageName) {
        Utils.checkNotNull(languageName, "languageName");
        this.languageName = languageName;
        return this;
    }

    /**
     * The BCP 47 language code representing the language of the generated track.
     */
    public SubtitleInput withLanguageCode(SubtitleInputLanguageCode languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = languageCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubtitleInput other = (SubtitleInput) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.languageName, other.languageName) &&
            Objects.deepEquals(this.languageCode, other.languageCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            url,
            languageName,
            languageCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubtitleInput.class,
                "type", type,
                "url", url,
                "languageName", languageName,
                "languageCode", languageCode);
    }
    
    public final static class Builder {
 
        private String type;
 
        private String url;
 
        private String languageName;
 
        private SubtitleInputLanguageCode languageCode;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Defines the type of input.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The direct URL of the subtitle file.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Name of the language in which the subtitles will be generated.
         */
        public Builder languageName(String languageName) {
            Utils.checkNotNull(languageName, "languageName");
            this.languageName = languageName;
            return this;
        }

        /**
         * The BCP 47 language code representing the language of the generated track.
         */
        public Builder languageCode(SubtitleInputLanguageCode languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = languageCode;
            return this;
        }
        
        public SubtitleInput build() {
            return new SubtitleInput(
                type,
                url,
                languageName,
                languageCode);
        }
    }
}
