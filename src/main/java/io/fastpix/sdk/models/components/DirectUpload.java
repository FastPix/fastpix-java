/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * DirectUpload
 * 
 * <p>Displays the result of the request.
 */
public class DirectUpload {

    /**
     * When creating the upload, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaId")
    private Optional<String> mediaId;

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The url hosts the media file for FastPix, which needs to be download to use further.  It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * The duration set for the validity of the upload URL. If the upload isn't completed within this timeframe, it's marked as timed out.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    private Optional<Double> timeout;

    /**
     * Upload media directly from a device using the url name or enter '*' to allow all.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corsOrigin")
    private Optional<String> corsOrigin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushMediaSettings")
    private Optional<? extends DirectUploadResponse> pushMediaSettings;

    @JsonCreator
    public DirectUpload(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mediaId") Optional<String> mediaId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("timeout") Optional<Double> timeout,
            @JsonProperty("corsOrigin") Optional<String> corsOrigin,
            @JsonProperty("pushMediaSettings") Optional<? extends DirectUploadResponse> pushMediaSettings) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mediaId, "mediaId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(timeout, "timeout");
        Utils.checkNotNull(corsOrigin, "corsOrigin");
        Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
        this.id = id;
        this.mediaId = mediaId;
        this.status = status;
        this.url = url;
        this.timeout = timeout;
        this.corsOrigin = corsOrigin;
        this.pushMediaSettings = pushMediaSettings;
    }
    
    public DirectUpload() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * When creating the upload, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    @JsonIgnore
    public Optional<String> mediaId() {
        return mediaId;
    }

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The url hosts the media file for FastPix, which needs to be download to use further.  It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * The duration set for the validity of the upload URL. If the upload isn't completed within this timeframe, it's marked as timed out.
     */
    @JsonIgnore
    public Optional<Double> timeout() {
        return timeout;
    }

    /**
     * Upload media directly from a device using the url name or enter '*' to allow all.
     */
    @JsonIgnore
    public Optional<String> corsOrigin() {
        return corsOrigin;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DirectUploadResponse> pushMediaSettings() {
        return (Optional<DirectUploadResponse>) pushMediaSettings;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * When creating the upload, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    public DirectUpload withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * When creating the upload, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    public DirectUpload withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    public DirectUpload withMediaId(String mediaId) {
        Utils.checkNotNull(mediaId, "mediaId");
        this.mediaId = Optional.ofNullable(mediaId);
        return this;
    }

    /**
     * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
     */
    public DirectUpload withMediaId(Optional<String> mediaId) {
        Utils.checkNotNull(mediaId, "mediaId");
        this.mediaId = mediaId;
        return this;
    }

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    public DirectUpload withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    public DirectUpload withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The url hosts the media file for FastPix, which needs to be download to use further.  It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    public DirectUpload withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The url hosts the media file for FastPix, which needs to be download to use further.  It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    public DirectUpload withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The duration set for the validity of the upload URL. If the upload isn't completed within this timeframe, it's marked as timed out.
     */
    public DirectUpload withTimeout(double timeout) {
        Utils.checkNotNull(timeout, "timeout");
        this.timeout = Optional.ofNullable(timeout);
        return this;
    }

    /**
     * The duration set for the validity of the upload URL. If the upload isn't completed within this timeframe, it's marked as timed out.
     */
    public DirectUpload withTimeout(Optional<Double> timeout) {
        Utils.checkNotNull(timeout, "timeout");
        this.timeout = timeout;
        return this;
    }

    /**
     * Upload media directly from a device using the url name or enter '*' to allow all.
     */
    public DirectUpload withCorsOrigin(String corsOrigin) {
        Utils.checkNotNull(corsOrigin, "corsOrigin");
        this.corsOrigin = Optional.ofNullable(corsOrigin);
        return this;
    }

    /**
     * Upload media directly from a device using the url name or enter '*' to allow all.
     */
    public DirectUpload withCorsOrigin(Optional<String> corsOrigin) {
        Utils.checkNotNull(corsOrigin, "corsOrigin");
        this.corsOrigin = corsOrigin;
        return this;
    }

    public DirectUpload withPushMediaSettings(DirectUploadResponse pushMediaSettings) {
        Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
        this.pushMediaSettings = Optional.ofNullable(pushMediaSettings);
        return this;
    }

    public DirectUpload withPushMediaSettings(Optional<? extends DirectUploadResponse> pushMediaSettings) {
        Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
        this.pushMediaSettings = pushMediaSettings;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectUpload other = (DirectUpload) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mediaId, other.mediaId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.timeout, other.timeout) &&
            Objects.deepEquals(this.corsOrigin, other.corsOrigin) &&
            Objects.deepEquals(this.pushMediaSettings, other.pushMediaSettings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            mediaId,
            status,
            url,
            timeout,
            corsOrigin,
            pushMediaSettings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DirectUpload.class,
                "id", id,
                "mediaId", mediaId,
                "status", status,
                "url", url,
                "timeout", timeout,
                "corsOrigin", corsOrigin,
                "pushMediaSettings", pushMediaSettings);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mediaId = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<Double> timeout;
 
        private Optional<String> corsOrigin = Optional.empty();
 
        private Optional<? extends DirectUploadResponse> pushMediaSettings = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * When creating the upload, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * When creating the upload, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
         */
        public Builder mediaId(String mediaId) {
            Utils.checkNotNull(mediaId, "mediaId");
            this.mediaId = Optional.ofNullable(mediaId);
            return this;
        }

        /**
         * When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
         */
        public Builder mediaId(Optional<String> mediaId) {
            Utils.checkNotNull(mediaId, "mediaId");
            this.mediaId = mediaId;
            return this;
        }

        /**
         * Determines the media's status, which can be one of the possible values.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Determines the media's status, which can be one of the possible values.
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The url hosts the media file for FastPix, which needs to be download to use further.  It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The url hosts the media file for FastPix, which needs to be download to use further.  It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The duration set for the validity of the upload URL. If the upload isn't completed within this timeframe, it's marked as timed out.
         */
        public Builder timeout(double timeout) {
            Utils.checkNotNull(timeout, "timeout");
            this.timeout = Optional.ofNullable(timeout);
            return this;
        }

        /**
         * The duration set for the validity of the upload URL. If the upload isn't completed within this timeframe, it's marked as timed out.
         */
        public Builder timeout(Optional<Double> timeout) {
            Utils.checkNotNull(timeout, "timeout");
            this.timeout = timeout;
            return this;
        }

        /**
         * Upload media directly from a device using the url name or enter '*' to allow all.
         */
        public Builder corsOrigin(String corsOrigin) {
            Utils.checkNotNull(corsOrigin, "corsOrigin");
            this.corsOrigin = Optional.ofNullable(corsOrigin);
            return this;
        }

        /**
         * Upload media directly from a device using the url name or enter '*' to allow all.
         */
        public Builder corsOrigin(Optional<String> corsOrigin) {
            Utils.checkNotNull(corsOrigin, "corsOrigin");
            this.corsOrigin = corsOrigin;
            return this;
        }

        public Builder pushMediaSettings(DirectUploadResponse pushMediaSettings) {
            Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
            this.pushMediaSettings = Optional.ofNullable(pushMediaSettings);
            return this;
        }

        public Builder pushMediaSettings(Optional<? extends DirectUploadResponse> pushMediaSettings) {
            Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
            this.pushMediaSettings = pushMediaSettings;
            return this;
        }
        
        public DirectUpload build() {
            if (timeout == null) {
                timeout = _SINGLETON_VALUE_Timeout.value();
            }
            return new DirectUpload(
                id,
                mediaId,
                status,
                url,
                timeout,
                corsOrigin,
                pushMediaSettings);
        }

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Timeout =
                new LazySingletonValue<>(
                        "timeout",
                        "14400",
                        new TypeReference<Optional<Double>>() {});
    }
}
