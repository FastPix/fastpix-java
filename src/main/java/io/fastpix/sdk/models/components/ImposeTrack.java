/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ImposeTrack {

    /**
     * URL of the audio track to impose on the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * Start time (in seconds) of the imposed audio in the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<Long> startTime;

    /**
     * End time (in seconds) of the imposed audio in the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<Long> endTime;

    /**
     * Level of fade-in effect (in seconds) at the start of the imposed audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fadeInLevel")
    private Optional<Long> fadeInLevel;

    /**
     * Level of fade-out effect (in seconds) at the end of the imposed audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fadeOutLevel")
    private Optional<Long> fadeOutLevel;

    @JsonCreator
    public ImposeTrack(
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("startTime") Optional<Long> startTime,
            @JsonProperty("endTime") Optional<Long> endTime,
            @JsonProperty("fadeInLevel") Optional<Long> fadeInLevel,
            @JsonProperty("fadeOutLevel") Optional<Long> fadeOutLevel) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(fadeInLevel, "fadeInLevel");
        Utils.checkNotNull(fadeOutLevel, "fadeOutLevel");
        this.url = url;
        this.startTime = startTime;
        this.endTime = endTime;
        this.fadeInLevel = fadeInLevel;
        this.fadeOutLevel = fadeOutLevel;
    }
    
    public ImposeTrack() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * URL of the audio track to impose on the video.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * Start time (in seconds) of the imposed audio in the video.
     */
    @JsonIgnore
    public Optional<Long> startTime() {
        return startTime;
    }

    /**
     * End time (in seconds) of the imposed audio in the video.
     */
    @JsonIgnore
    public Optional<Long> endTime() {
        return endTime;
    }

    /**
     * Level of fade-in effect (in seconds) at the start of the imposed audio.
     */
    @JsonIgnore
    public Optional<Long> fadeInLevel() {
        return fadeInLevel;
    }

    /**
     * Level of fade-out effect (in seconds) at the end of the imposed audio.
     */
    @JsonIgnore
    public Optional<Long> fadeOutLevel() {
        return fadeOutLevel;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * URL of the audio track to impose on the video.
     */
    public ImposeTrack withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * URL of the audio track to impose on the video.
     */
    public ImposeTrack withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Start time (in seconds) of the imposed audio in the video.
     */
    public ImposeTrack withStartTime(long startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * Start time (in seconds) of the imposed audio in the video.
     */
    public ImposeTrack withStartTime(Optional<Long> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * End time (in seconds) of the imposed audio in the video.
     */
    public ImposeTrack withEndTime(long endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * End time (in seconds) of the imposed audio in the video.
     */
    public ImposeTrack withEndTime(Optional<Long> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * Level of fade-in effect (in seconds) at the start of the imposed audio.
     */
    public ImposeTrack withFadeInLevel(long fadeInLevel) {
        Utils.checkNotNull(fadeInLevel, "fadeInLevel");
        this.fadeInLevel = Optional.ofNullable(fadeInLevel);
        return this;
    }

    /**
     * Level of fade-in effect (in seconds) at the start of the imposed audio.
     */
    public ImposeTrack withFadeInLevel(Optional<Long> fadeInLevel) {
        Utils.checkNotNull(fadeInLevel, "fadeInLevel");
        this.fadeInLevel = fadeInLevel;
        return this;
    }

    /**
     * Level of fade-out effect (in seconds) at the end of the imposed audio.
     */
    public ImposeTrack withFadeOutLevel(long fadeOutLevel) {
        Utils.checkNotNull(fadeOutLevel, "fadeOutLevel");
        this.fadeOutLevel = Optional.ofNullable(fadeOutLevel);
        return this;
    }

    /**
     * Level of fade-out effect (in seconds) at the end of the imposed audio.
     */
    public ImposeTrack withFadeOutLevel(Optional<Long> fadeOutLevel) {
        Utils.checkNotNull(fadeOutLevel, "fadeOutLevel");
        this.fadeOutLevel = fadeOutLevel;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImposeTrack other = (ImposeTrack) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.startTime, other.startTime) &&
            Objects.deepEquals(this.endTime, other.endTime) &&
            Objects.deepEquals(this.fadeInLevel, other.fadeInLevel) &&
            Objects.deepEquals(this.fadeOutLevel, other.fadeOutLevel);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            startTime,
            endTime,
            fadeInLevel,
            fadeOutLevel);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImposeTrack.class,
                "url", url,
                "startTime", startTime,
                "endTime", endTime,
                "fadeInLevel", fadeInLevel,
                "fadeOutLevel", fadeOutLevel);
    }
    
    public final static class Builder {
 
        private Optional<String> url = Optional.empty();
 
        private Optional<Long> startTime = Optional.empty();
 
        private Optional<Long> endTime = Optional.empty();
 
        private Optional<Long> fadeInLevel = Optional.empty();
 
        private Optional<Long> fadeOutLevel = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL of the audio track to impose on the video.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * URL of the audio track to impose on the video.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Start time (in seconds) of the imposed audio in the video.
         */
        public Builder startTime(long startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * Start time (in seconds) of the imposed audio in the video.
         */
        public Builder startTime(Optional<Long> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * End time (in seconds) of the imposed audio in the video.
         */
        public Builder endTime(long endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * End time (in seconds) of the imposed audio in the video.
         */
        public Builder endTime(Optional<Long> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        /**
         * Level of fade-in effect (in seconds) at the start of the imposed audio.
         */
        public Builder fadeInLevel(long fadeInLevel) {
            Utils.checkNotNull(fadeInLevel, "fadeInLevel");
            this.fadeInLevel = Optional.ofNullable(fadeInLevel);
            return this;
        }

        /**
         * Level of fade-in effect (in seconds) at the start of the imposed audio.
         */
        public Builder fadeInLevel(Optional<Long> fadeInLevel) {
            Utils.checkNotNull(fadeInLevel, "fadeInLevel");
            this.fadeInLevel = fadeInLevel;
            return this;
        }

        /**
         * Level of fade-out effect (in seconds) at the end of the imposed audio.
         */
        public Builder fadeOutLevel(long fadeOutLevel) {
            Utils.checkNotNull(fadeOutLevel, "fadeOutLevel");
            this.fadeOutLevel = Optional.ofNullable(fadeOutLevel);
            return this;
        }

        /**
         * Level of fade-out effect (in seconds) at the end of the imposed audio.
         */
        public Builder fadeOutLevel(Optional<Long> fadeOutLevel) {
            Utils.checkNotNull(fadeOutLevel, "fadeOutLevel");
            this.fadeOutLevel = fadeOutLevel;
            return this;
        }
        
        public ImposeTrack build() {
            return new ImposeTrack(
                url,
                startTime,
                endTime,
                fadeInLevel,
                fadeOutLevel);
        }
    }
}
