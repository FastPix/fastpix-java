/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class Segment2 {

    /**
     * URL of the segment to be added.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Flag indicating the segment should be inserted at the end.
     */
    @JsonProperty("insertAtEnd")
    private boolean insertAtEnd;

    @JsonCreator
    public Segment2(
            @JsonProperty("url") String url,
            @JsonProperty("insertAtEnd") boolean insertAtEnd) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(insertAtEnd, "insertAtEnd");
        this.url = url;
        this.insertAtEnd = insertAtEnd;
    }

    /**
     * URL of the segment to be added.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Flag indicating the segment should be inserted at the end.
     */
    @JsonIgnore
    public boolean insertAtEnd() {
        return insertAtEnd;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * URL of the segment to be added.
     */
    public Segment2 withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Flag indicating the segment should be inserted at the end.
     */
    public Segment2 withInsertAtEnd(boolean insertAtEnd) {
        Utils.checkNotNull(insertAtEnd, "insertAtEnd");
        this.insertAtEnd = insertAtEnd;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Segment2 other = (Segment2) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.insertAtEnd, other.insertAtEnd);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            insertAtEnd);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Segment2.class,
                "url", url,
                "insertAtEnd", insertAtEnd);
    }
    
    public final static class Builder {
 
        private String url;
 
        private Boolean insertAtEnd;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * URL of the segment to be added.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Flag indicating the segment should be inserted at the end.
         */
        public Builder insertAtEnd(boolean insertAtEnd) {
            Utils.checkNotNull(insertAtEnd, "insertAtEnd");
            this.insertAtEnd = insertAtEnd;
            return this;
        }
        
        public Segment2 build() {
            return new Segment2(
                url,
                insertAtEnd);
        }
    }
}
