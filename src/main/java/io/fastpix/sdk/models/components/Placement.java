/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class Placement {

    /**
     * Horizontal alignment of the watermark.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xAlign")
    private Optional<? extends XAlign> xAlign;

    /**
     * Horizontal margin from the edge of the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xMargin")
    private Optional<String> xMargin;

    /**
     * Vertical alignment of the watermark.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yAlign")
    private Optional<? extends YAlign> yAlign;

    /**
     * Vertical margin from the edge of the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yMargin")
    private Optional<String> yMargin;

    @JsonCreator
    public Placement(
            @JsonProperty("xAlign") Optional<? extends XAlign> xAlign,
            @JsonProperty("xMargin") Optional<String> xMargin,
            @JsonProperty("yAlign") Optional<? extends YAlign> yAlign,
            @JsonProperty("yMargin") Optional<String> yMargin) {
        Utils.checkNotNull(xAlign, "xAlign");
        Utils.checkNotNull(xMargin, "xMargin");
        Utils.checkNotNull(yAlign, "yAlign");
        Utils.checkNotNull(yMargin, "yMargin");
        this.xAlign = xAlign;
        this.xMargin = xMargin;
        this.yAlign = yAlign;
        this.yMargin = yMargin;
    }
    
    public Placement() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Horizontal alignment of the watermark.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<XAlign> xAlign() {
        return (Optional<XAlign>) xAlign;
    }

    /**
     * Horizontal margin from the edge of the video.
     */
    @JsonIgnore
    public Optional<String> xMargin() {
        return xMargin;
    }

    /**
     * Vertical alignment of the watermark.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<YAlign> yAlign() {
        return (Optional<YAlign>) yAlign;
    }

    /**
     * Vertical margin from the edge of the video.
     */
    @JsonIgnore
    public Optional<String> yMargin() {
        return yMargin;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Horizontal alignment of the watermark.
     */
    public Placement withXAlign(XAlign xAlign) {
        Utils.checkNotNull(xAlign, "xAlign");
        this.xAlign = Optional.ofNullable(xAlign);
        return this;
    }

    /**
     * Horizontal alignment of the watermark.
     */
    public Placement withXAlign(Optional<? extends XAlign> xAlign) {
        Utils.checkNotNull(xAlign, "xAlign");
        this.xAlign = xAlign;
        return this;
    }

    /**
     * Horizontal margin from the edge of the video.
     */
    public Placement withXMargin(String xMargin) {
        Utils.checkNotNull(xMargin, "xMargin");
        this.xMargin = Optional.ofNullable(xMargin);
        return this;
    }

    /**
     * Horizontal margin from the edge of the video.
     */
    public Placement withXMargin(Optional<String> xMargin) {
        Utils.checkNotNull(xMargin, "xMargin");
        this.xMargin = xMargin;
        return this;
    }

    /**
     * Vertical alignment of the watermark.
     */
    public Placement withYAlign(YAlign yAlign) {
        Utils.checkNotNull(yAlign, "yAlign");
        this.yAlign = Optional.ofNullable(yAlign);
        return this;
    }

    /**
     * Vertical alignment of the watermark.
     */
    public Placement withYAlign(Optional<? extends YAlign> yAlign) {
        Utils.checkNotNull(yAlign, "yAlign");
        this.yAlign = yAlign;
        return this;
    }

    /**
     * Vertical margin from the edge of the video.
     */
    public Placement withYMargin(String yMargin) {
        Utils.checkNotNull(yMargin, "yMargin");
        this.yMargin = Optional.ofNullable(yMargin);
        return this;
    }

    /**
     * Vertical margin from the edge of the video.
     */
    public Placement withYMargin(Optional<String> yMargin) {
        Utils.checkNotNull(yMargin, "yMargin");
        this.yMargin = yMargin;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Placement other = (Placement) o;
        return 
            Objects.deepEquals(this.xAlign, other.xAlign) &&
            Objects.deepEquals(this.xMargin, other.xMargin) &&
            Objects.deepEquals(this.yAlign, other.yAlign) &&
            Objects.deepEquals(this.yMargin, other.yMargin);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xAlign,
            xMargin,
            yAlign,
            yMargin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Placement.class,
                "xAlign", xAlign,
                "xMargin", xMargin,
                "yAlign", yAlign,
                "yMargin", yMargin);
    }
    
    public final static class Builder {
 
        private Optional<? extends XAlign> xAlign = Optional.empty();
 
        private Optional<String> xMargin = Optional.empty();
 
        private Optional<? extends YAlign> yAlign = Optional.empty();
 
        private Optional<String> yMargin = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Horizontal alignment of the watermark.
         */
        public Builder xAlign(XAlign xAlign) {
            Utils.checkNotNull(xAlign, "xAlign");
            this.xAlign = Optional.ofNullable(xAlign);
            return this;
        }

        /**
         * Horizontal alignment of the watermark.
         */
        public Builder xAlign(Optional<? extends XAlign> xAlign) {
            Utils.checkNotNull(xAlign, "xAlign");
            this.xAlign = xAlign;
            return this;
        }

        /**
         * Horizontal margin from the edge of the video.
         */
        public Builder xMargin(String xMargin) {
            Utils.checkNotNull(xMargin, "xMargin");
            this.xMargin = Optional.ofNullable(xMargin);
            return this;
        }

        /**
         * Horizontal margin from the edge of the video.
         */
        public Builder xMargin(Optional<String> xMargin) {
            Utils.checkNotNull(xMargin, "xMargin");
            this.xMargin = xMargin;
            return this;
        }

        /**
         * Vertical alignment of the watermark.
         */
        public Builder yAlign(YAlign yAlign) {
            Utils.checkNotNull(yAlign, "yAlign");
            this.yAlign = Optional.ofNullable(yAlign);
            return this;
        }

        /**
         * Vertical alignment of the watermark.
         */
        public Builder yAlign(Optional<? extends YAlign> yAlign) {
            Utils.checkNotNull(yAlign, "yAlign");
            this.yAlign = yAlign;
            return this;
        }

        /**
         * Vertical margin from the edge of the video.
         */
        public Builder yMargin(String yMargin) {
            Utils.checkNotNull(yMargin, "yMargin");
            this.yMargin = Optional.ofNullable(yMargin);
            return this;
        }

        /**
         * Vertical margin from the edge of the video.
         */
        public Builder yMargin(Optional<String> yMargin) {
            Utils.checkNotNull(yMargin, "yMargin");
            this.yMargin = yMargin;
            return this;
        }
        
        public Placement build() {
            return new Placement(
                xAlign,
                xMargin,
                yAlign,
                yMargin);
        }
    }
}
