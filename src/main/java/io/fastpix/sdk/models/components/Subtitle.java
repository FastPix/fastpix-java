/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Subtitle
 * 
 * <p>Generates subtitle files for audio/video files.
 */
public class Subtitle {

    /**
     * Name of the language in which the subtitles will be generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageName")
    private Optional<String> languageName;

    /**
     * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends SubtitleMetadata> metadata;

    /**
     * Language codes are concise, standardized symbols that denote languages, utilizing either two or three characters for identification. The language code must be compliant with the BCP 47 standard to ensure compatibility. (for text only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    private Optional<? extends CreateMediaRequestLanguageCode> languageCode;

    @JsonCreator
    public Subtitle(
            @JsonProperty("languageName") Optional<String> languageName,
            @JsonProperty("metadata") Optional<? extends SubtitleMetadata> metadata,
            @JsonProperty("languageCode") Optional<? extends CreateMediaRequestLanguageCode> languageCode) {
        Utils.checkNotNull(languageName, "languageName");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageName = languageName;
        this.metadata = metadata;
        this.languageCode = languageCode;
    }
    
    public Subtitle() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the language in which the subtitles will be generated.
     */
    @JsonIgnore
    public Optional<String> languageName() {
        return languageName;
    }

    /**
     * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubtitleMetadata> metadata() {
        return (Optional<SubtitleMetadata>) metadata;
    }

    /**
     * Language codes are concise, standardized symbols that denote languages, utilizing either two or three characters for identification. The language code must be compliant with the BCP 47 standard to ensure compatibility. (for text only).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateMediaRequestLanguageCode> languageCode() {
        return (Optional<CreateMediaRequestLanguageCode>) languageCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the language in which the subtitles will be generated.
     */
    public Subtitle withLanguageName(String languageName) {
        Utils.checkNotNull(languageName, "languageName");
        this.languageName = Optional.ofNullable(languageName);
        return this;
    }

    /**
     * Name of the language in which the subtitles will be generated.
     */
    public Subtitle withLanguageName(Optional<String> languageName) {
        Utils.checkNotNull(languageName, "languageName");
        this.languageName = languageName;
        return this;
    }

    /**
     * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
     */
    public Subtitle withMetadata(SubtitleMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
     */
    public Subtitle withMetadata(Optional<? extends SubtitleMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Language codes are concise, standardized symbols that denote languages, utilizing either two or three characters for identification. The language code must be compliant with the BCP 47 standard to ensure compatibility. (for text only).
     */
    public Subtitle withLanguageCode(CreateMediaRequestLanguageCode languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = Optional.ofNullable(languageCode);
        return this;
    }

    /**
     * Language codes are concise, standardized symbols that denote languages, utilizing either two or three characters for identification. The language code must be compliant with the BCP 47 standard to ensure compatibility. (for text only).
     */
    public Subtitle withLanguageCode(Optional<? extends CreateMediaRequestLanguageCode> languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = languageCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Subtitle other = (Subtitle) o;
        return 
            Objects.deepEquals(this.languageName, other.languageName) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.languageCode, other.languageCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            languageName,
            metadata,
            languageCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Subtitle.class,
                "languageName", languageName,
                "metadata", metadata,
                "languageCode", languageCode);
    }
    
    public final static class Builder {
 
        private Optional<String> languageName = Optional.empty();
 
        private Optional<? extends SubtitleMetadata> metadata = Optional.empty();
 
        private Optional<? extends CreateMediaRequestLanguageCode> languageCode = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the language in which the subtitles will be generated.
         */
        public Builder languageName(String languageName) {
            Utils.checkNotNull(languageName, "languageName");
            this.languageName = Optional.ofNullable(languageName);
            return this;
        }

        /**
         * Name of the language in which the subtitles will be generated.
         */
        public Builder languageName(Optional<String> languageName) {
            Utils.checkNotNull(languageName, "languageName");
            this.languageName = languageName;
            return this;
        }

        /**
         * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
         */
        public Builder metadata(SubtitleMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * You can search for videos with specific key-value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have a maximum of 255 characters and up to 10 entries are allowed.
         */
        public Builder metadata(Optional<? extends SubtitleMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Language codes are concise, standardized symbols that denote languages, utilizing either two or three characters for identification. The language code must be compliant with the BCP 47 standard to ensure compatibility. (for text only).
         */
        public Builder languageCode(CreateMediaRequestLanguageCode languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        /**
         * Language codes are concise, standardized symbols that denote languages, utilizing either two or three characters for identification. The language code must be compliant with the BCP 47 standard to ensure compatibility. (for text only).
         */
        public Builder languageCode(Optional<? extends CreateMediaRequestLanguageCode> languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = languageCode;
            return this;
        }
        
        public Subtitle build() {
            return new Subtitle(
                languageName,
                metadata,
                languageCode);
        }
    }
}
