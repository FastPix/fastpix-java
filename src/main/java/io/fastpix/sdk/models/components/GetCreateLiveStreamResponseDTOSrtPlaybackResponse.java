/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GetCreateLiveStreamResponseDTOSrtPlaybackResponse
 * 
 * <p>This object contains the livestream playback response details for SRT Protocol.
 */
public class GetCreateLiveStreamResponseDTOSrtPlaybackResponse {

    /**
     * A unique identifier for the SRT playback stream. This ID is used to distinguish between different playback streams.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("srtPlaybackStreamId")
    private Optional<String> srtPlaybackStreamId;

    /**
     * A playback secret used for securing the SRT playback stream. This ensures that only authorized users can access the playback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("srtPlaybackSecret")
    private Optional<String> srtPlaybackSecret;

    @JsonCreator
    public GetCreateLiveStreamResponseDTOSrtPlaybackResponse(
            @JsonProperty("srtPlaybackStreamId") Optional<String> srtPlaybackStreamId,
            @JsonProperty("srtPlaybackSecret") Optional<String> srtPlaybackSecret) {
        Utils.checkNotNull(srtPlaybackStreamId, "srtPlaybackStreamId");
        Utils.checkNotNull(srtPlaybackSecret, "srtPlaybackSecret");
        this.srtPlaybackStreamId = srtPlaybackStreamId;
        this.srtPlaybackSecret = srtPlaybackSecret;
    }
    
    public GetCreateLiveStreamResponseDTOSrtPlaybackResponse() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier for the SRT playback stream. This ID is used to distinguish between different playback streams.
     */
    @JsonIgnore
    public Optional<String> srtPlaybackStreamId() {
        return srtPlaybackStreamId;
    }

    /**
     * A playback secret used for securing the SRT playback stream. This ensures that only authorized users can access the playback.
     */
    @JsonIgnore
    public Optional<String> srtPlaybackSecret() {
        return srtPlaybackSecret;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A unique identifier for the SRT playback stream. This ID is used to distinguish between different playback streams.
     */
    public GetCreateLiveStreamResponseDTOSrtPlaybackResponse withSrtPlaybackStreamId(String srtPlaybackStreamId) {
        Utils.checkNotNull(srtPlaybackStreamId, "srtPlaybackStreamId");
        this.srtPlaybackStreamId = Optional.ofNullable(srtPlaybackStreamId);
        return this;
    }

    /**
     * A unique identifier for the SRT playback stream. This ID is used to distinguish between different playback streams.
     */
    public GetCreateLiveStreamResponseDTOSrtPlaybackResponse withSrtPlaybackStreamId(Optional<String> srtPlaybackStreamId) {
        Utils.checkNotNull(srtPlaybackStreamId, "srtPlaybackStreamId");
        this.srtPlaybackStreamId = srtPlaybackStreamId;
        return this;
    }

    /**
     * A playback secret used for securing the SRT playback stream. This ensures that only authorized users can access the playback.
     */
    public GetCreateLiveStreamResponseDTOSrtPlaybackResponse withSrtPlaybackSecret(String srtPlaybackSecret) {
        Utils.checkNotNull(srtPlaybackSecret, "srtPlaybackSecret");
        this.srtPlaybackSecret = Optional.ofNullable(srtPlaybackSecret);
        return this;
    }

    /**
     * A playback secret used for securing the SRT playback stream. This ensures that only authorized users can access the playback.
     */
    public GetCreateLiveStreamResponseDTOSrtPlaybackResponse withSrtPlaybackSecret(Optional<String> srtPlaybackSecret) {
        Utils.checkNotNull(srtPlaybackSecret, "srtPlaybackSecret");
        this.srtPlaybackSecret = srtPlaybackSecret;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCreateLiveStreamResponseDTOSrtPlaybackResponse other = (GetCreateLiveStreamResponseDTOSrtPlaybackResponse) o;
        return 
            Objects.deepEquals(this.srtPlaybackStreamId, other.srtPlaybackStreamId) &&
            Objects.deepEquals(this.srtPlaybackSecret, other.srtPlaybackSecret);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            srtPlaybackStreamId,
            srtPlaybackSecret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCreateLiveStreamResponseDTOSrtPlaybackResponse.class,
                "srtPlaybackStreamId", srtPlaybackStreamId,
                "srtPlaybackSecret", srtPlaybackSecret);
    }
    
    public final static class Builder {
 
        private Optional<String> srtPlaybackStreamId = Optional.empty();
 
        private Optional<String> srtPlaybackSecret = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the SRT playback stream. This ID is used to distinguish between different playback streams.
         */
        public Builder srtPlaybackStreamId(String srtPlaybackStreamId) {
            Utils.checkNotNull(srtPlaybackStreamId, "srtPlaybackStreamId");
            this.srtPlaybackStreamId = Optional.ofNullable(srtPlaybackStreamId);
            return this;
        }

        /**
         * A unique identifier for the SRT playback stream. This ID is used to distinguish between different playback streams.
         */
        public Builder srtPlaybackStreamId(Optional<String> srtPlaybackStreamId) {
            Utils.checkNotNull(srtPlaybackStreamId, "srtPlaybackStreamId");
            this.srtPlaybackStreamId = srtPlaybackStreamId;
            return this;
        }

        /**
         * A playback secret used for securing the SRT playback stream. This ensures that only authorized users can access the playback.
         */
        public Builder srtPlaybackSecret(String srtPlaybackSecret) {
            Utils.checkNotNull(srtPlaybackSecret, "srtPlaybackSecret");
            this.srtPlaybackSecret = Optional.ofNullable(srtPlaybackSecret);
            return this;
        }

        /**
         * A playback secret used for securing the SRT playback stream. This ensures that only authorized users can access the playback.
         */
        public Builder srtPlaybackSecret(Optional<String> srtPlaybackSecret) {
            Utils.checkNotNull(srtPlaybackSecret, "srtPlaybackSecret");
            this.srtPlaybackSecret = srtPlaybackSecret;
            return this;
        }
        
        public GetCreateLiveStreamResponseDTOSrtPlaybackResponse build() {
            return new GetCreateLiveStreamResponseDTOSrtPlaybackResponse(
                srtPlaybackStreamId,
                srtPlaybackSecret);
        }
    }
}
