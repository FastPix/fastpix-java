/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class SimulcastRequest {

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamKey")
    private Optional<String> streamKey;

    @JsonCreator
    public SimulcastRequest(
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("streamKey") Optional<String> streamKey) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(streamKey, "streamKey");
        this.url = url;
        this.streamKey = streamKey;
    }
    
    public SimulcastRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    @JsonIgnore
    public Optional<String> streamKey() {
        return streamKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    public SimulcastRequest withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
     */
    public SimulcastRequest withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    public SimulcastRequest withStreamKey(String streamKey) {
        Utils.checkNotNull(streamKey, "streamKey");
        this.streamKey = Optional.ofNullable(streamKey);
        return this;
    }

    /**
     * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
     */
    public SimulcastRequest withStreamKey(Optional<String> streamKey) {
        Utils.checkNotNull(streamKey, "streamKey");
        this.streamKey = streamKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimulcastRequest other = (SimulcastRequest) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.streamKey, other.streamKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            streamKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimulcastRequest.class,
                "url", url,
                "streamKey", streamKey);
    }
    
    public final static class Builder {
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> streamKey = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
         */
        public Builder streamKey(String streamKey) {
            Utils.checkNotNull(streamKey, "streamKey");
            this.streamKey = Optional.ofNullable(streamKey);
            return this;
        }

        /**
         * A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
         */
        public Builder streamKey(Optional<String> streamKey) {
            Utils.checkNotNull(streamKey, "streamKey");
            this.streamKey = streamKey;
            return this;
        }
        
        public SimulcastRequest build() {
            return new SimulcastRequest(
                url,
                streamKey);
        }
    }
}
