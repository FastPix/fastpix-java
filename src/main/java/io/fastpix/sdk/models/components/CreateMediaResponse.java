/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class CreateMediaResponse {

    /**
     * The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trial")
    private Optional<Boolean> trial;

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * Time the media was created, defined as a localDateTime (UTC Time).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<OffsetDateTime> createdAt;

    /**
     * Time the media was updated, defined as a localDateTime (UTC Time).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<OffsetDateTime> updatedAt;

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackIds")
    private Optional<? extends List<PlaybackId>> playbackIds;

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends CreateMediaResponseMetadata> metadata;

    /**
     * The maximum resolution tier determines the highest quality your media will be available in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxResolution")
    private Optional<? extends CreateMediaResponseMaxResolution> maxResolution;

    @JsonCreator
    public CreateMediaResponse(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("trial") Optional<Boolean> trial,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("createdAt") Optional<OffsetDateTime> createdAt,
            @JsonProperty("updatedAt") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("playbackIds") Optional<? extends List<PlaybackId>> playbackIds,
            @JsonProperty("metadata") Optional<? extends CreateMediaResponseMetadata> metadata,
            @JsonProperty("maxResolution") Optional<? extends CreateMediaResponseMaxResolution> maxResolution) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(trial, "trial");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(playbackIds, "playbackIds");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.id = id;
        this.trial = trial;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.playbackIds = playbackIds;
        this.metadata = metadata;
        this.maxResolution = maxResolution;
    }
    
    public CreateMediaResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
     */
    @JsonIgnore
    public Optional<Boolean> trial() {
        return trial;
    }

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * Time the media was created, defined as a localDateTime (UTC Time).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Time the media was updated, defined as a localDateTime (UTC Time).
     */
    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PlaybackId>> playbackIds() {
        return (Optional<List<PlaybackId>>) playbackIds;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateMediaResponseMetadata> metadata() {
        return (Optional<CreateMediaResponseMetadata>) metadata;
    }

    /**
     * The maximum resolution tier determines the highest quality your media will be available in.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateMediaResponseMaxResolution> maxResolution() {
        return (Optional<CreateMediaResponseMaxResolution>) maxResolution;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
     */
    public CreateMediaResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
     */
    public CreateMediaResponse withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
     */
    public CreateMediaResponse withTrial(boolean trial) {
        Utils.checkNotNull(trial, "trial");
        this.trial = Optional.ofNullable(trial);
        return this;
    }

    /**
     * FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
     */
    public CreateMediaResponse withTrial(Optional<Boolean> trial) {
        Utils.checkNotNull(trial, "trial");
        this.trial = trial;
        return this;
    }

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    public CreateMediaResponse withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Determines the media's status, which can be one of the possible values.
     */
    public CreateMediaResponse withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Time the media was created, defined as a localDateTime (UTC Time).
     */
    public CreateMediaResponse withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Time the media was created, defined as a localDateTime (UTC Time).
     */
    public CreateMediaResponse withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Time the media was updated, defined as a localDateTime (UTC Time).
     */
    public CreateMediaResponse withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Time the media was updated, defined as a localDateTime (UTC Time).
     */
    public CreateMediaResponse withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    public CreateMediaResponse withPlaybackIds(List<PlaybackId> playbackIds) {
        Utils.checkNotNull(playbackIds, "playbackIds");
        this.playbackIds = Optional.ofNullable(playbackIds);
        return this;
    }

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    public CreateMediaResponse withPlaybackIds(Optional<? extends List<PlaybackId>> playbackIds) {
        Utils.checkNotNull(playbackIds, "playbackIds");
        this.playbackIds = playbackIds;
        return this;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    public CreateMediaResponse withMetadata(CreateMediaResponseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    public CreateMediaResponse withMetadata(Optional<? extends CreateMediaResponseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The maximum resolution tier determines the highest quality your media will be available in.
     */
    public CreateMediaResponse withMaxResolution(CreateMediaResponseMaxResolution maxResolution) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.maxResolution = Optional.ofNullable(maxResolution);
        return this;
    }

    /**
     * The maximum resolution tier determines the highest quality your media will be available in.
     */
    public CreateMediaResponse withMaxResolution(Optional<? extends CreateMediaResponseMaxResolution> maxResolution) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.maxResolution = maxResolution;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMediaResponse other = (CreateMediaResponse) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.trial, other.trial) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.playbackIds, other.playbackIds) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.maxResolution, other.maxResolution);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            trial,
            status,
            createdAt,
            updatedAt,
            playbackIds,
            metadata,
            maxResolution);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMediaResponse.class,
                "id", id,
                "trial", trial,
                "status", status,
                "createdAt", createdAt,
                "updatedAt", updatedAt,
                "playbackIds", playbackIds,
                "metadata", metadata,
                "maxResolution", maxResolution);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Boolean> trial;
 
        private Optional<String> status = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends List<PlaybackId>> playbackIds = Optional.empty();
 
        private Optional<? extends CreateMediaResponseMetadata> metadata = Optional.empty();
 
        private Optional<? extends CreateMediaResponseMaxResolution> maxResolution;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The Media is assigned a universal unique identifier, which can contain a maximum of 255 characters.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
         */
        public Builder trial(boolean trial) {
            Utils.checkNotNull(trial, "trial");
            this.trial = Optional.ofNullable(trial);
            return this;
        }

        /**
         * FastPix allows for a free trial. Create as many media files as you like during the trial period. Remember, each clip can only be 10 seconds long and will be deleted after 24 hours. Also, all trial content will have the FastPix logo watermark.
         */
        public Builder trial(Optional<Boolean> trial) {
            Utils.checkNotNull(trial, "trial");
            this.trial = trial;
            return this;
        }

        /**
         * Determines the media's status, which can be one of the possible values.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Determines the media's status, which can be one of the possible values.
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Time the media was created, defined as a localDateTime (UTC Time).
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Time the media was created, defined as a localDateTime (UTC Time).
         */
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Time the media was updated, defined as a localDateTime (UTC Time).
         */
        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Time the media was updated, defined as a localDateTime (UTC Time).
         */
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * A collection of Playback ID objects utilized for crafting HLS playback URLs.
         */
        public Builder playbackIds(List<PlaybackId> playbackIds) {
            Utils.checkNotNull(playbackIds, "playbackIds");
            this.playbackIds = Optional.ofNullable(playbackIds);
            return this;
        }

        /**
         * A collection of Playback ID objects utilized for crafting HLS playback URLs.
         */
        public Builder playbackIds(Optional<? extends List<PlaybackId>> playbackIds) {
            Utils.checkNotNull(playbackIds, "playbackIds");
            this.playbackIds = playbackIds;
            return this;
        }

        /**
         * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
         */
        public Builder metadata(CreateMediaResponseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
         */
        public Builder metadata(Optional<? extends CreateMediaResponseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * The maximum resolution tier determines the highest quality your media will be available in.
         */
        public Builder maxResolution(CreateMediaResponseMaxResolution maxResolution) {
            Utils.checkNotNull(maxResolution, "maxResolution");
            this.maxResolution = Optional.ofNullable(maxResolution);
            return this;
        }

        /**
         * The maximum resolution tier determines the highest quality your media will be available in.
         */
        public Builder maxResolution(Optional<? extends CreateMediaResponseMaxResolution> maxResolution) {
            Utils.checkNotNull(maxResolution, "maxResolution");
            this.maxResolution = maxResolution;
            return this;
        }
        
        public CreateMediaResponse build() {
            if (trial == null) {
                trial = _SINGLETON_VALUE_Trial.value();
            }
            if (maxResolution == null) {
                maxResolution = _SINGLETON_VALUE_MaxResolution.value();
            }
            return new CreateMediaResponse(
                id,
                trial,
                status,
                createdAt,
                updatedAt,
                playbackIds,
                metadata,
                maxResolution);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Trial =
                new LazySingletonValue<>(
                        "trial",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends CreateMediaResponseMaxResolution>> _SINGLETON_VALUE_MaxResolution =
                new LazySingletonValue<>(
                        "maxResolution",
                        "\"1080p\"",
                        new TypeReference<Optional<? extends CreateMediaResponseMaxResolution>>() {});
    }
}
