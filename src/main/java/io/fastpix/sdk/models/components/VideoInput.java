/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class VideoInput {

    /**
     * Defines the type of input.
     */
    @JsonProperty("type")
    private String type;

    /**
     * The url hosts the media file for FastPix, which needs to be downloaded to use further. It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Start time indicates where encoding should begin within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the start time is 3 minutes (180 seconds). Note: Start time is always mentioned in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<Double> startTime;

    /**
     * End time indicates where encoding should end within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the end time is 6 minutes (360 seconds). Note: End time is always mentioned in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<Double> endTime;

    /**
     * The url of the intro video which is to be added at the start of the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("introUrl")
    private Optional<String> introUrl;

    /**
     * The url of the outro video which is to be added at the end of the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outroUrl")
    private Optional<String> outroUrl;

    /**
     * The list of the startTime-endTime of the segments to be removed from the actual video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expungeSegments")
    private Optional<? extends List<String>> expungeSegments;

    /**
     * A list of media segments to be added or processed. Each segment includes details such as the URL of the media file and instructions on where it should be inserted in the final media composition. A segment can either specify an exact timestamp  (`insertAt`) or indicate that it should be added at the end (`insertAtEnd`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segments")
    private Optional<? extends List<SegmentUnion>> segments;

    @JsonCreator
    public VideoInput(
            @JsonProperty("type") String type,
            @JsonProperty("url") String url,
            @JsonProperty("startTime") Optional<Double> startTime,
            @JsonProperty("endTime") Optional<Double> endTime,
            @JsonProperty("introUrl") Optional<String> introUrl,
            @JsonProperty("outroUrl") Optional<String> outroUrl,
            @JsonProperty("expungeSegments") Optional<? extends List<String>> expungeSegments,
            @JsonProperty("segments") Optional<? extends List<SegmentUnion>> segments) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(introUrl, "introUrl");
        Utils.checkNotNull(outroUrl, "outroUrl");
        Utils.checkNotNull(expungeSegments, "expungeSegments");
        Utils.checkNotNull(segments, "segments");
        this.type = type;
        this.url = url;
        this.startTime = startTime;
        this.endTime = endTime;
        this.introUrl = introUrl;
        this.outroUrl = outroUrl;
        this.expungeSegments = expungeSegments;
        this.segments = segments;
    }
    
    public VideoInput(
            String type,
            String url) {
        this(type, url, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Defines the type of input.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * The url hosts the media file for FastPix, which needs to be downloaded to use further. It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Start time indicates where encoding should begin within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the start time is 3 minutes (180 seconds). Note: Start time is always mentioned in seconds.
     */
    @JsonIgnore
    public Optional<Double> startTime() {
        return startTime;
    }

    /**
     * End time indicates where encoding should end within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the end time is 6 minutes (360 seconds). Note: End time is always mentioned in seconds.
     */
    @JsonIgnore
    public Optional<Double> endTime() {
        return endTime;
    }

    /**
     * The url of the intro video which is to be added at the start of the video.
     */
    @JsonIgnore
    public Optional<String> introUrl() {
        return introUrl;
    }

    /**
     * The url of the outro video which is to be added at the end of the video.
     */
    @JsonIgnore
    public Optional<String> outroUrl() {
        return outroUrl;
    }

    /**
     * The list of the startTime-endTime of the segments to be removed from the actual video.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> expungeSegments() {
        return (Optional<List<String>>) expungeSegments;
    }

    /**
     * A list of media segments to be added or processed. Each segment includes details such as the URL of the media file and instructions on where it should be inserted in the final media composition. A segment can either specify an exact timestamp  (`insertAt`) or indicate that it should be added at the end (`insertAtEnd`).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SegmentUnion>> segments() {
        return (Optional<List<SegmentUnion>>) segments;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Defines the type of input.
     */
    public VideoInput withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The url hosts the media file for FastPix, which needs to be downloaded to use further. It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
     */
    public VideoInput withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Start time indicates where encoding should begin within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the start time is 3 minutes (180 seconds). Note: Start time is always mentioned in seconds.
     */
    public VideoInput withStartTime(double startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * Start time indicates where encoding should begin within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the start time is 3 minutes (180 seconds). Note: Start time is always mentioned in seconds.
     */
    public VideoInput withStartTime(Optional<Double> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * End time indicates where encoding should end within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the end time is 6 minutes (360 seconds). Note: End time is always mentioned in seconds.
     */
    public VideoInput withEndTime(double endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * End time indicates where encoding should end within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the end time is 6 minutes (360 seconds). Note: End time is always mentioned in seconds.
     */
    public VideoInput withEndTime(Optional<Double> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    /**
     * The url of the intro video which is to be added at the start of the video.
     */
    public VideoInput withIntroUrl(String introUrl) {
        Utils.checkNotNull(introUrl, "introUrl");
        this.introUrl = Optional.ofNullable(introUrl);
        return this;
    }

    /**
     * The url of the intro video which is to be added at the start of the video.
     */
    public VideoInput withIntroUrl(Optional<String> introUrl) {
        Utils.checkNotNull(introUrl, "introUrl");
        this.introUrl = introUrl;
        return this;
    }

    /**
     * The url of the outro video which is to be added at the end of the video.
     */
    public VideoInput withOutroUrl(String outroUrl) {
        Utils.checkNotNull(outroUrl, "outroUrl");
        this.outroUrl = Optional.ofNullable(outroUrl);
        return this;
    }

    /**
     * The url of the outro video which is to be added at the end of the video.
     */
    public VideoInput withOutroUrl(Optional<String> outroUrl) {
        Utils.checkNotNull(outroUrl, "outroUrl");
        this.outroUrl = outroUrl;
        return this;
    }

    /**
     * The list of the startTime-endTime of the segments to be removed from the actual video.
     */
    public VideoInput withExpungeSegments(List<String> expungeSegments) {
        Utils.checkNotNull(expungeSegments, "expungeSegments");
        this.expungeSegments = Optional.ofNullable(expungeSegments);
        return this;
    }

    /**
     * The list of the startTime-endTime of the segments to be removed from the actual video.
     */
    public VideoInput withExpungeSegments(Optional<? extends List<String>> expungeSegments) {
        Utils.checkNotNull(expungeSegments, "expungeSegments");
        this.expungeSegments = expungeSegments;
        return this;
    }

    /**
     * A list of media segments to be added or processed. Each segment includes details such as the URL of the media file and instructions on where it should be inserted in the final media composition. A segment can either specify an exact timestamp  (`insertAt`) or indicate that it should be added at the end (`insertAtEnd`).
     */
    public VideoInput withSegments(List<SegmentUnion> segments) {
        Utils.checkNotNull(segments, "segments");
        this.segments = Optional.ofNullable(segments);
        return this;
    }

    /**
     * A list of media segments to be added or processed. Each segment includes details such as the URL of the media file and instructions on where it should be inserted in the final media composition. A segment can either specify an exact timestamp  (`insertAt`) or indicate that it should be added at the end (`insertAtEnd`).
     */
    public VideoInput withSegments(Optional<? extends List<SegmentUnion>> segments) {
        Utils.checkNotNull(segments, "segments");
        this.segments = segments;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VideoInput other = (VideoInput) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.startTime, other.startTime) &&
            Objects.deepEquals(this.endTime, other.endTime) &&
            Objects.deepEquals(this.introUrl, other.introUrl) &&
            Objects.deepEquals(this.outroUrl, other.outroUrl) &&
            Objects.deepEquals(this.expungeSegments, other.expungeSegments) &&
            Objects.deepEquals(this.segments, other.segments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            url,
            startTime,
            endTime,
            introUrl,
            outroUrl,
            expungeSegments,
            segments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VideoInput.class,
                "type", type,
                "url", url,
                "startTime", startTime,
                "endTime", endTime,
                "introUrl", introUrl,
                "outroUrl", outroUrl,
                "expungeSegments", expungeSegments,
                "segments", segments);
    }
    
    public final static class Builder {
 
        private String type;
 
        private String url;
 
        private Optional<Double> startTime = Optional.empty();
 
        private Optional<Double> endTime = Optional.empty();
 
        private Optional<String> introUrl = Optional.empty();
 
        private Optional<String> outroUrl = Optional.empty();
 
        private Optional<? extends List<String>> expungeSegments = Optional.empty();
 
        private Optional<? extends List<SegmentUnion>> segments = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Defines the type of input.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The url hosts the media file for FastPix, which needs to be downloaded to use further. It supports formats like MP3, MP4, MOV, MKV, or TS, and includes text tracks for subtitles/CC (SRT file/VTT file). While FastPix can handle various audio and video formats and codecs, using standard inputs can help with optimal processing speed.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Start time indicates where encoding should begin within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the start time is 3 minutes (180 seconds). Note: Start time is always mentioned in seconds.
         */
        public Builder startTime(double startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * Start time indicates where encoding should begin within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the start time is 3 minutes (180 seconds). Note: Start time is always mentioned in seconds.
         */
        public Builder startTime(Optional<Double> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * End time indicates where encoding should end within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the end time is 6 minutes (360 seconds). Note: End time is always mentioned in seconds.
         */
        public Builder endTime(double endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * End time indicates where encoding should end within the video file. For example, if you want to encode a segment from 3 minutes (180 seconds) to 6 minutes (360 seconds) in a 10-minute (600 seconds) video, the end time is 6 minutes (360 seconds). Note: End time is always mentioned in seconds.
         */
        public Builder endTime(Optional<Double> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        /**
         * The url of the intro video which is to be added at the start of the video.
         */
        public Builder introUrl(String introUrl) {
            Utils.checkNotNull(introUrl, "introUrl");
            this.introUrl = Optional.ofNullable(introUrl);
            return this;
        }

        /**
         * The url of the intro video which is to be added at the start of the video.
         */
        public Builder introUrl(Optional<String> introUrl) {
            Utils.checkNotNull(introUrl, "introUrl");
            this.introUrl = introUrl;
            return this;
        }

        /**
         * The url of the outro video which is to be added at the end of the video.
         */
        public Builder outroUrl(String outroUrl) {
            Utils.checkNotNull(outroUrl, "outroUrl");
            this.outroUrl = Optional.ofNullable(outroUrl);
            return this;
        }

        /**
         * The url of the outro video which is to be added at the end of the video.
         */
        public Builder outroUrl(Optional<String> outroUrl) {
            Utils.checkNotNull(outroUrl, "outroUrl");
            this.outroUrl = outroUrl;
            return this;
        }

        /**
         * The list of the startTime-endTime of the segments to be removed from the actual video.
         */
        public Builder expungeSegments(List<String> expungeSegments) {
            Utils.checkNotNull(expungeSegments, "expungeSegments");
            this.expungeSegments = Optional.ofNullable(expungeSegments);
            return this;
        }

        /**
         * The list of the startTime-endTime of the segments to be removed from the actual video.
         */
        public Builder expungeSegments(Optional<? extends List<String>> expungeSegments) {
            Utils.checkNotNull(expungeSegments, "expungeSegments");
            this.expungeSegments = expungeSegments;
            return this;
        }

        /**
         * A list of media segments to be added or processed. Each segment includes details such as the URL of the media file and instructions on where it should be inserted in the final media composition. A segment can either specify an exact timestamp  (`insertAt`) or indicate that it should be added at the end (`insertAtEnd`).
         */
        public Builder segments(List<SegmentUnion> segments) {
            Utils.checkNotNull(segments, "segments");
            this.segments = Optional.ofNullable(segments);
            return this;
        }

        /**
         * A list of media segments to be added or processed. Each segment includes details such as the URL of the media file and instructions on where it should be inserted in the final media composition. A segment can either specify an exact timestamp  (`insertAt`) or indicate that it should be added at the end (`insertAtEnd`).
         */
        public Builder segments(Optional<? extends List<SegmentUnion>> segments) {
            Utils.checkNotNull(segments, "segments");
            this.segments = segments;
            return this;
        }
        
        public VideoInput build() {
            return new VideoInput(
                type,
                url,
                startTime,
                endTime,
                introUrl,
                outroUrl,
                expungeSegments,
                segments);
        }
    }
}
