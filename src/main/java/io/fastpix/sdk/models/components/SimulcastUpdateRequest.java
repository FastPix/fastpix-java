/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class SimulcastUpdateRequest {

    /**
     * When the value is set to false, the simulcast will be disabled for the given stream.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEnabled")
    private Optional<Boolean> isEnabled;

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends SimulcastUpdateRequestMetadata> metadata;

    @JsonCreator
    public SimulcastUpdateRequest(
            @JsonProperty("isEnabled") Optional<Boolean> isEnabled,
            @JsonProperty("metadata") Optional<? extends SimulcastUpdateRequestMetadata> metadata) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        Utils.checkNotNull(metadata, "metadata");
        this.isEnabled = isEnabled;
        this.metadata = metadata;
    }
    
    public SimulcastUpdateRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * When the value is set to false, the simulcast will be disabled for the given stream.
     */
    @JsonIgnore
    public Optional<Boolean> isEnabled() {
        return isEnabled;
    }

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimulcastUpdateRequestMetadata> metadata() {
        return (Optional<SimulcastUpdateRequestMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * When the value is set to false, the simulcast will be disabled for the given stream.
     */
    public SimulcastUpdateRequest withIsEnabled(boolean isEnabled) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        this.isEnabled = Optional.ofNullable(isEnabled);
        return this;
    }

    /**
     * When the value is set to false, the simulcast will be disabled for the given stream.
     */
    public SimulcastUpdateRequest withIsEnabled(Optional<Boolean> isEnabled) {
        Utils.checkNotNull(isEnabled, "isEnabled");
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    public SimulcastUpdateRequest withMetadata(SimulcastUpdateRequestMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
     */
    public SimulcastUpdateRequest withMetadata(Optional<? extends SimulcastUpdateRequestMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimulcastUpdateRequest other = (SimulcastUpdateRequest) o;
        return 
            Objects.deepEquals(this.isEnabled, other.isEnabled) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isEnabled,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimulcastUpdateRequest.class,
                "isEnabled", isEnabled,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isEnabled = Optional.empty();
 
        private Optional<? extends SimulcastUpdateRequestMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * When the value is set to false, the simulcast will be disabled for the given stream.
         */
        public Builder isEnabled(boolean isEnabled) {
            Utils.checkNotNull(isEnabled, "isEnabled");
            this.isEnabled = Optional.ofNullable(isEnabled);
            return this;
        }

        /**
         * When the value is set to false, the simulcast will be disabled for the given stream.
         */
        public Builder isEnabled(Optional<Boolean> isEnabled) {
            Utils.checkNotNull(isEnabled, "isEnabled");
            this.isEnabled = isEnabled;
            return this;
        }

        /**
         * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
         */
        public Builder metadata(SimulcastUpdateRequestMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
         */
        public Builder metadata(Optional<? extends SimulcastUpdateRequestMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public SimulcastUpdateRequest build() {
            return new SimulcastUpdateRequest(
                isEnabled,
                metadata);
        }
    }
}
