/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * SimulcastResponse
 * 
 * <p>Displays the result of the request.
 */
public class SimulcastResponse {

    /**
     * It demonstrates whether the request is successful or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<Boolean> success;

    /**
     * Displays the result of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends SimulcastResponseData> data;

    @JsonCreator
    public SimulcastResponse(
            @JsonProperty("success") Optional<Boolean> success,
            @JsonProperty("data") Optional<? extends SimulcastResponseData> data) {
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(data, "data");
        this.success = success;
        this.data = data;
    }
    
    public SimulcastResponse() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * It demonstrates whether the request is successful or not.
     */
    @JsonIgnore
    public Optional<Boolean> success() {
        return success;
    }

    /**
     * Displays the result of the request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimulcastResponseData> data() {
        return (Optional<SimulcastResponseData>) data;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * It demonstrates whether the request is successful or not.
     */
    public SimulcastResponse withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * It demonstrates whether the request is successful or not.
     */
    public SimulcastResponse withSuccess(Optional<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * Displays the result of the request.
     */
    public SimulcastResponse withData(SimulcastResponseData data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    /**
     * Displays the result of the request.
     */
    public SimulcastResponse withData(Optional<? extends SimulcastResponseData> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimulcastResponse other = (SimulcastResponse) o;
        return 
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            success,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimulcastResponse.class,
                "success", success,
                "data", data);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> success = Optional.empty();
 
        private Optional<? extends SimulcastResponseData> data = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * It demonstrates whether the request is successful or not.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * It demonstrates whether the request is successful or not.
         */
        public Builder success(Optional<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * Displays the result of the request.
         */
        public Builder data(SimulcastResponseData data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        /**
         * Displays the result of the request.
         */
        public Builder data(Optional<? extends SimulcastResponseData> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public SimulcastResponse build() {
            return new SimulcastResponse(
                success,
                data);
        }
    }
}
