/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * InputMediaSettings
 * 
 * <p>Displays the result of the input Media settings.
 */
public class InputMediaSettings {

    /**
     * Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxResolution")
    private Optional<? extends CreateLiveStreamRequestMaxResolution> maxResolution;

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconnectWindow")
    private Optional<Long> reconnectWindow;

    /**
     * Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaPolicy")
    private Optional<? extends MediaPolicy> mediaPolicy;

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends CreateLiveStreamRequestMetadata> metadata;

    @JsonCreator
    public InputMediaSettings(
            @JsonProperty("maxResolution") Optional<? extends CreateLiveStreamRequestMaxResolution> maxResolution,
            @JsonProperty("reconnectWindow") Optional<Long> reconnectWindow,
            @JsonProperty("mediaPolicy") Optional<? extends MediaPolicy> mediaPolicy,
            @JsonProperty("metadata") Optional<? extends CreateLiveStreamRequestMetadata> metadata) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        Utils.checkNotNull(reconnectWindow, "reconnectWindow");
        Utils.checkNotNull(mediaPolicy, "mediaPolicy");
        Utils.checkNotNull(metadata, "metadata");
        this.maxResolution = maxResolution;
        this.reconnectWindow = reconnectWindow;
        this.mediaPolicy = mediaPolicy;
        this.metadata = metadata;
    }
    
    public InputMediaSettings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateLiveStreamRequestMaxResolution> maxResolution() {
        return (Optional<CreateLiveStreamRequestMaxResolution>) maxResolution;
    }

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    @JsonIgnore
    public Optional<Long> reconnectWindow() {
        return reconnectWindow;
    }

    /**
     * Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MediaPolicy> mediaPolicy() {
        return (Optional<MediaPolicy>) mediaPolicy;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateLiveStreamRequestMetadata> metadata() {
        return (Optional<CreateLiveStreamRequestMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
     */
    public InputMediaSettings withMaxResolution(CreateLiveStreamRequestMaxResolution maxResolution) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.maxResolution = Optional.ofNullable(maxResolution);
        return this;
    }

    /**
     * Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
     */
    public InputMediaSettings withMaxResolution(Optional<? extends CreateLiveStreamRequestMaxResolution> maxResolution) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.maxResolution = maxResolution;
        return this;
    }

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    public InputMediaSettings withReconnectWindow(long reconnectWindow) {
        Utils.checkNotNull(reconnectWindow, "reconnectWindow");
        this.reconnectWindow = Optional.ofNullable(reconnectWindow);
        return this;
    }

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    public InputMediaSettings withReconnectWindow(Optional<Long> reconnectWindow) {
        Utils.checkNotNull(reconnectWindow, "reconnectWindow");
        this.reconnectWindow = reconnectWindow;
        return this;
    }

    /**
     * Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
     */
    public InputMediaSettings withMediaPolicy(MediaPolicy mediaPolicy) {
        Utils.checkNotNull(mediaPolicy, "mediaPolicy");
        this.mediaPolicy = Optional.ofNullable(mediaPolicy);
        return this;
    }

    /**
     * Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
     */
    public InputMediaSettings withMediaPolicy(Optional<? extends MediaPolicy> mediaPolicy) {
        Utils.checkNotNull(mediaPolicy, "mediaPolicy");
        this.mediaPolicy = mediaPolicy;
        return this;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    public InputMediaSettings withMetadata(CreateLiveStreamRequestMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    public InputMediaSettings withMetadata(Optional<? extends CreateLiveStreamRequestMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InputMediaSettings other = (InputMediaSettings) o;
        return 
            Objects.deepEquals(this.maxResolution, other.maxResolution) &&
            Objects.deepEquals(this.reconnectWindow, other.reconnectWindow) &&
            Objects.deepEquals(this.mediaPolicy, other.mediaPolicy) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            maxResolution,
            reconnectWindow,
            mediaPolicy,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InputMediaSettings.class,
                "maxResolution", maxResolution,
                "reconnectWindow", reconnectWindow,
                "mediaPolicy", mediaPolicy,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends CreateLiveStreamRequestMaxResolution> maxResolution;
 
        private Optional<Long> reconnectWindow;
 
        private Optional<? extends MediaPolicy> mediaPolicy;
 
        private Optional<? extends CreateLiveStreamRequestMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
         */
        public Builder maxResolution(CreateLiveStreamRequestMaxResolution maxResolution) {
            Utils.checkNotNull(maxResolution, "maxResolution");
            this.maxResolution = Optional.ofNullable(maxResolution);
            return this;
        }

        /**
         * Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
         */
        public Builder maxResolution(Optional<? extends CreateLiveStreamRequestMaxResolution> maxResolution) {
            Utils.checkNotNull(maxResolution, "maxResolution");
            this.maxResolution = maxResolution;
            return this;
        }

        /**
         * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
         */
        public Builder reconnectWindow(long reconnectWindow) {
            Utils.checkNotNull(reconnectWindow, "reconnectWindow");
            this.reconnectWindow = Optional.ofNullable(reconnectWindow);
            return this;
        }

        /**
         * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
         */
        public Builder reconnectWindow(Optional<Long> reconnectWindow) {
            Utils.checkNotNull(reconnectWindow, "reconnectWindow");
            this.reconnectWindow = reconnectWindow;
            return this;
        }

        /**
         * Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
         */
        public Builder mediaPolicy(MediaPolicy mediaPolicy) {
            Utils.checkNotNull(mediaPolicy, "mediaPolicy");
            this.mediaPolicy = Optional.ofNullable(mediaPolicy);
            return this;
        }

        /**
         * Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
         */
        public Builder mediaPolicy(Optional<? extends MediaPolicy> mediaPolicy) {
            Utils.checkNotNull(mediaPolicy, "mediaPolicy");
            this.mediaPolicy = mediaPolicy;
            return this;
        }

        /**
         * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
         */
        public Builder metadata(CreateLiveStreamRequestMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
         */
        public Builder metadata(Optional<? extends CreateLiveStreamRequestMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public InputMediaSettings build() {
            if (maxResolution == null) {
                maxResolution = _SINGLETON_VALUE_MaxResolution.value();
            }
            if (reconnectWindow == null) {
                reconnectWindow = _SINGLETON_VALUE_ReconnectWindow.value();
            }
            if (mediaPolicy == null) {
                mediaPolicy = _SINGLETON_VALUE_MediaPolicy.value();
            }
            return new InputMediaSettings(
                maxResolution,
                reconnectWindow,
                mediaPolicy,
                metadata);
        }

        private static final LazySingletonValue<Optional<? extends CreateLiveStreamRequestMaxResolution>> _SINGLETON_VALUE_MaxResolution =
                new LazySingletonValue<>(
                        "maxResolution",
                        "\"1080p\"",
                        new TypeReference<Optional<? extends CreateLiveStreamRequestMaxResolution>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_ReconnectWindow =
                new LazySingletonValue<>(
                        "reconnectWindow",
                        "60",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<? extends MediaPolicy>> _SINGLETON_VALUE_MediaPolicy =
                new LazySingletonValue<>(
                        "mediaPolicy",
                        "\"public\"",
                        new TypeReference<Optional<? extends MediaPolicy>>() {});
    }
}
