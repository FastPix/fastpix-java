/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * PlaybackSettings
 * 
 * <p>Displays the result of the playback settings.
 */
public class PlaybackSettings {

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessPolicy")
    private Optional<? extends PlaybackSettingsAccessPolicy> accessPolicy;

    @JsonCreator
    public PlaybackSettings(
            @JsonProperty("accessPolicy") Optional<? extends PlaybackSettingsAccessPolicy> accessPolicy) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        this.accessPolicy = accessPolicy;
    }
    
    public PlaybackSettings() {
        this(Optional.empty());
    }

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PlaybackSettingsAccessPolicy> accessPolicy() {
        return (Optional<PlaybackSettingsAccessPolicy>) accessPolicy;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    public PlaybackSettings withAccessPolicy(PlaybackSettingsAccessPolicy accessPolicy) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        this.accessPolicy = Optional.ofNullable(accessPolicy);
        return this;
    }

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    public PlaybackSettings withAccessPolicy(Optional<? extends PlaybackSettingsAccessPolicy> accessPolicy) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        this.accessPolicy = accessPolicy;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlaybackSettings other = (PlaybackSettings) o;
        return 
            Objects.deepEquals(this.accessPolicy, other.accessPolicy);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessPolicy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PlaybackSettings.class,
                "accessPolicy", accessPolicy);
    }
    
    public final static class Builder {
 
        private Optional<? extends PlaybackSettingsAccessPolicy> accessPolicy;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Determines if access to the streamed content is kept private or available to all.
         */
        public Builder accessPolicy(PlaybackSettingsAccessPolicy accessPolicy) {
            Utils.checkNotNull(accessPolicy, "accessPolicy");
            this.accessPolicy = Optional.ofNullable(accessPolicy);
            return this;
        }

        /**
         * Determines if access to the streamed content is kept private or available to all.
         */
        public Builder accessPolicy(Optional<? extends PlaybackSettingsAccessPolicy> accessPolicy) {
            Utils.checkNotNull(accessPolicy, "accessPolicy");
            this.accessPolicy = accessPolicy;
            return this;
        }
        
        public PlaybackSettings build() {
            if (accessPolicy == null) {
                accessPolicy = _SINGLETON_VALUE_AccessPolicy.value();
            }
            return new PlaybackSettings(
                accessPolicy);
        }

        private static final LazySingletonValue<Optional<? extends PlaybackSettingsAccessPolicy>> _SINGLETON_VALUE_AccessPolicy =
                new LazySingletonValue<>(
                        "accessPolicy",
                        "\"public\"",
                        new TypeReference<Optional<? extends PlaybackSettingsAccessPolicy>>() {});
    }
}
