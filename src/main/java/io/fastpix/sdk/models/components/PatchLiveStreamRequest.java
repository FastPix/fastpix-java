/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PatchLiveStreamRequest {

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends PatchLiveStreamRequestMetadata> metadata;

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconnectWindow")
    private Optional<Long> reconnectWindow;

    @JsonCreator
    public PatchLiveStreamRequest(
            @JsonProperty("metadata") Optional<? extends PatchLiveStreamRequestMetadata> metadata,
            @JsonProperty("reconnectWindow") Optional<Long> reconnectWindow) {
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(reconnectWindow, "reconnectWindow");
        this.metadata = metadata;
        this.reconnectWindow = reconnectWindow;
    }
    
    public PatchLiveStreamRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PatchLiveStreamRequestMetadata> metadata() {
        return (Optional<PatchLiveStreamRequestMetadata>) metadata;
    }

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    @JsonIgnore
    public Optional<Long> reconnectWindow() {
        return reconnectWindow;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    public PatchLiveStreamRequest withMetadata(PatchLiveStreamRequestMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
     */
    public PatchLiveStreamRequest withMetadata(Optional<? extends PatchLiveStreamRequestMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    public PatchLiveStreamRequest withReconnectWindow(long reconnectWindow) {
        Utils.checkNotNull(reconnectWindow, "reconnectWindow");
        this.reconnectWindow = Optional.ofNullable(reconnectWindow);
        return this;
    }

    /**
     * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
     */
    public PatchLiveStreamRequest withReconnectWindow(Optional<Long> reconnectWindow) {
        Utils.checkNotNull(reconnectWindow, "reconnectWindow");
        this.reconnectWindow = reconnectWindow;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PatchLiveStreamRequest other = (PatchLiveStreamRequest) o;
        return 
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.reconnectWindow, other.reconnectWindow);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            metadata,
            reconnectWindow);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PatchLiveStreamRequest.class,
                "metadata", metadata,
                "reconnectWindow", reconnectWindow);
    }
    
    public final static class Builder {
 
        private Optional<? extends PatchLiveStreamRequestMetadata> metadata = Optional.empty();
 
        private Optional<Long> reconnectWindow;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
         */
        public Builder metadata(PatchLiveStreamRequestMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
         */
        public Builder metadata(Optional<? extends PatchLiveStreamRequestMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
         */
        public Builder reconnectWindow(long reconnectWindow) {
            Utils.checkNotNull(reconnectWindow, "reconnectWindow");
            this.reconnectWindow = Optional.ofNullable(reconnectWindow);
            return this;
        }

        /**
         * In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
         */
        public Builder reconnectWindow(Optional<Long> reconnectWindow) {
            Utils.checkNotNull(reconnectWindow, "reconnectWindow");
            this.reconnectWindow = reconnectWindow;
            return this;
        }
        
        public PatchLiveStreamRequest build() {
            if (reconnectWindow == null) {
                reconnectWindow = _SINGLETON_VALUE_ReconnectWindow.value();
            }
            return new PatchLiveStreamRequest(
                metadata,
                reconnectWindow);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_ReconnectWindow =
                new LazySingletonValue<>(
                        "reconnectWindow",
                        "60",
                        new TypeReference<Optional<Long>>() {});
    }
}
