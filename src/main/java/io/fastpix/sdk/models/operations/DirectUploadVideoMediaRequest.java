/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * DirectUploadVideoMediaRequest
 * 
 * <p>Request body for direct upload
 */
public class DirectUploadVideoMediaRequest {

    /**
     * Upload media directly from a device using the URL name or enter '*' to allow all.
     */
    @JsonProperty("corsOrigin")
    private String corsOrigin;

    /**
     * Configuration settings for media upload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushMediaSettings")
    private Optional<? extends PushMediaSettings> pushMediaSettings;

    @JsonCreator
    public DirectUploadVideoMediaRequest(
            @JsonProperty("corsOrigin") String corsOrigin,
            @JsonProperty("pushMediaSettings") Optional<? extends PushMediaSettings> pushMediaSettings) {
        Utils.checkNotNull(corsOrigin, "corsOrigin");
        Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
        this.corsOrigin = corsOrigin;
        this.pushMediaSettings = pushMediaSettings;
    }
    
    public DirectUploadVideoMediaRequest(
            String corsOrigin) {
        this(corsOrigin, Optional.empty());
    }

    /**
     * Upload media directly from a device using the URL name or enter '*' to allow all.
     */
    @JsonIgnore
    public String corsOrigin() {
        return corsOrigin;
    }

    /**
     * Configuration settings for media upload.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PushMediaSettings> pushMediaSettings() {
        return (Optional<PushMediaSettings>) pushMediaSettings;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Upload media directly from a device using the URL name or enter '*' to allow all.
     */
    public DirectUploadVideoMediaRequest withCorsOrigin(String corsOrigin) {
        Utils.checkNotNull(corsOrigin, "corsOrigin");
        this.corsOrigin = corsOrigin;
        return this;
    }

    /**
     * Configuration settings for media upload.
     */
    public DirectUploadVideoMediaRequest withPushMediaSettings(PushMediaSettings pushMediaSettings) {
        Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
        this.pushMediaSettings = Optional.ofNullable(pushMediaSettings);
        return this;
    }

    /**
     * Configuration settings for media upload.
     */
    public DirectUploadVideoMediaRequest withPushMediaSettings(Optional<? extends PushMediaSettings> pushMediaSettings) {
        Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
        this.pushMediaSettings = pushMediaSettings;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectUploadVideoMediaRequest other = (DirectUploadVideoMediaRequest) o;
        return 
            Objects.deepEquals(this.corsOrigin, other.corsOrigin) &&
            Objects.deepEquals(this.pushMediaSettings, other.pushMediaSettings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            corsOrigin,
            pushMediaSettings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DirectUploadVideoMediaRequest.class,
                "corsOrigin", corsOrigin,
                "pushMediaSettings", pushMediaSettings);
    }
    
    public final static class Builder {
 
        private String corsOrigin;
 
        private Optional<? extends PushMediaSettings> pushMediaSettings = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Upload media directly from a device using the URL name or enter '*' to allow all.
         */
        public Builder corsOrigin(String corsOrigin) {
            Utils.checkNotNull(corsOrigin, "corsOrigin");
            this.corsOrigin = corsOrigin;
            return this;
        }

        /**
         * Configuration settings for media upload.
         */
        public Builder pushMediaSettings(PushMediaSettings pushMediaSettings) {
            Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
            this.pushMediaSettings = Optional.ofNullable(pushMediaSettings);
            return this;
        }

        /**
         * Configuration settings for media upload.
         */
        public Builder pushMediaSettings(Optional<? extends PushMediaSettings> pushMediaSettings) {
            Utils.checkNotNull(pushMediaSettings, "pushMediaSettings");
            this.pushMediaSettings = pushMediaSettings;
            return this;
        }
        
        public DirectUploadVideoMediaRequest build() {
            return new DirectUploadVideoMediaRequest(
                corsOrigin,
                pushMediaSettings);
        }
    }
}
