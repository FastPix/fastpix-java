/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.fastpix.sdk.utils.SpeakeasyMetadata;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class DeleteMediaPlaybackIdRequest {

    /**
     * Return the universal unique identifier for media which can contain a maximum of 255 characters.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=mediaId")
    private String mediaId;

    /**
     * Return the universal unique identifier for playbacks  which can contain a maximum of 255 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=playbackId")
    private String playbackId;

    @JsonCreator
    public DeleteMediaPlaybackIdRequest(
            String mediaId,
            String playbackId) {
        Utils.checkNotNull(mediaId, "mediaId");
        Utils.checkNotNull(playbackId, "playbackId");
        this.mediaId = mediaId;
        this.playbackId = playbackId;
    }

    /**
     * Return the universal unique identifier for media which can contain a maximum of 255 characters.
     */
    @JsonIgnore
    public String mediaId() {
        return mediaId;
    }

    /**
     * Return the universal unique identifier for playbacks  which can contain a maximum of 255 characters.
     */
    @JsonIgnore
    public String playbackId() {
        return playbackId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Return the universal unique identifier for media which can contain a maximum of 255 characters.
     */
    public DeleteMediaPlaybackIdRequest withMediaId(String mediaId) {
        Utils.checkNotNull(mediaId, "mediaId");
        this.mediaId = mediaId;
        return this;
    }

    /**
     * Return the universal unique identifier for playbacks  which can contain a maximum of 255 characters.
     */
    public DeleteMediaPlaybackIdRequest withPlaybackId(String playbackId) {
        Utils.checkNotNull(playbackId, "playbackId");
        this.playbackId = playbackId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteMediaPlaybackIdRequest other = (DeleteMediaPlaybackIdRequest) o;
        return 
            Objects.deepEquals(this.mediaId, other.mediaId) &&
            Objects.deepEquals(this.playbackId, other.playbackId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            mediaId,
            playbackId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteMediaPlaybackIdRequest.class,
                "mediaId", mediaId,
                "playbackId", playbackId);
    }
    
    public final static class Builder {
 
        private String mediaId;
 
        private String playbackId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Return the universal unique identifier for media which can contain a maximum of 255 characters.
         */
        public Builder mediaId(String mediaId) {
            Utils.checkNotNull(mediaId, "mediaId");
            this.mediaId = mediaId;
            return this;
        }

        /**
         * Return the universal unique identifier for playbacks  which can contain a maximum of 255 characters.
         */
        public Builder playbackId(String playbackId) {
            Utils.checkNotNull(playbackId, "playbackId");
            this.playbackId = playbackId;
            return this;
        }
        
        public DeleteMediaPlaybackIdRequest build() {
            return new DeleteMediaPlaybackIdRequest(
                mediaId,
                playbackId);
        }
    }
}
