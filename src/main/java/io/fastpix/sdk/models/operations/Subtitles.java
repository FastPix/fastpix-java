/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * Subtitles
 * 
 * <p>Generates subtitle files for audio/video files.
 */
public class Subtitles {

    /**
     * Name of the language for the subtitles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageName")
    private Optional<String> languageName;

    /**
     * Searchable metadata tags for the video in key-value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends SubtitlesMetadata> metadata;

    /**
     * Language codes (BCP 47 compliant) used for text files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    private Optional<? extends LanguageCode> languageCode;

    @JsonCreator
    public Subtitles(
            @JsonProperty("languageName") Optional<String> languageName,
            @JsonProperty("metadata") Optional<? extends SubtitlesMetadata> metadata,
            @JsonProperty("languageCode") Optional<? extends LanguageCode> languageCode) {
        Utils.checkNotNull(languageName, "languageName");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageName = languageName;
        this.metadata = metadata;
        this.languageCode = languageCode;
    }
    
    public Subtitles() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the language for the subtitles.
     */
    @JsonIgnore
    public Optional<String> languageName() {
        return languageName;
    }

    /**
     * Searchable metadata tags for the video in key-value pairs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SubtitlesMetadata> metadata() {
        return (Optional<SubtitlesMetadata>) metadata;
    }

    /**
     * Language codes (BCP 47 compliant) used for text files.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LanguageCode> languageCode() {
        return (Optional<LanguageCode>) languageCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Name of the language for the subtitles.
     */
    public Subtitles withLanguageName(String languageName) {
        Utils.checkNotNull(languageName, "languageName");
        this.languageName = Optional.ofNullable(languageName);
        return this;
    }

    /**
     * Name of the language for the subtitles.
     */
    public Subtitles withLanguageName(Optional<String> languageName) {
        Utils.checkNotNull(languageName, "languageName");
        this.languageName = languageName;
        return this;
    }

    /**
     * Searchable metadata tags for the video in key-value pairs.
     */
    public Subtitles withMetadata(SubtitlesMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Searchable metadata tags for the video in key-value pairs.
     */
    public Subtitles withMetadata(Optional<? extends SubtitlesMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Language codes (BCP 47 compliant) used for text files.
     */
    public Subtitles withLanguageCode(LanguageCode languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = Optional.ofNullable(languageCode);
        return this;
    }

    /**
     * Language codes (BCP 47 compliant) used for text files.
     */
    public Subtitles withLanguageCode(Optional<? extends LanguageCode> languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = languageCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Subtitles other = (Subtitles) o;
        return 
            Objects.deepEquals(this.languageName, other.languageName) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.languageCode, other.languageCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            languageName,
            metadata,
            languageCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Subtitles.class,
                "languageName", languageName,
                "metadata", metadata,
                "languageCode", languageCode);
    }
    
    public final static class Builder {
 
        private Optional<String> languageName = Optional.empty();
 
        private Optional<? extends SubtitlesMetadata> metadata = Optional.empty();
 
        private Optional<? extends LanguageCode> languageCode = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the language for the subtitles.
         */
        public Builder languageName(String languageName) {
            Utils.checkNotNull(languageName, "languageName");
            this.languageName = Optional.ofNullable(languageName);
            return this;
        }

        /**
         * Name of the language for the subtitles.
         */
        public Builder languageName(Optional<String> languageName) {
            Utils.checkNotNull(languageName, "languageName");
            this.languageName = languageName;
            return this;
        }

        /**
         * Searchable metadata tags for the video in key-value pairs.
         */
        public Builder metadata(SubtitlesMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Searchable metadata tags for the video in key-value pairs.
         */
        public Builder metadata(Optional<? extends SubtitlesMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Language codes (BCP 47 compliant) used for text files.
         */
        public Builder languageCode(LanguageCode languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        /**
         * Language codes (BCP 47 compliant) used for text files.
         */
        public Builder languageCode(Optional<? extends LanguageCode> languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = languageCode;
            return this;
        }
        
        public Subtitles build() {
            return new Subtitles(
                languageName,
                metadata,
                languageCode);
        }
    }
}
