/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.fastpix.sdk.utils.SpeakeasyMetadata;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class GetSpecificSimulcastOfStreamRequest {

    /**
     * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=streamId")
    private String streamId;

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=simulcastId")
    private String simulcastId;

    @JsonCreator
    public GetSpecificSimulcastOfStreamRequest(
            String streamId,
            String simulcastId) {
        Utils.checkNotNull(streamId, "streamId");
        Utils.checkNotNull(simulcastId, "simulcastId");
        this.streamId = streamId;
        this.simulcastId = simulcastId;
    }

    /**
     * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
     */
    @JsonIgnore
    public String streamId() {
        return streamId;
    }

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    @JsonIgnore
    public String simulcastId() {
        return simulcastId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
     */
    public GetSpecificSimulcastOfStreamRequest withStreamId(String streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = streamId;
        return this;
    }

    /**
     * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
     */
    public GetSpecificSimulcastOfStreamRequest withSimulcastId(String simulcastId) {
        Utils.checkNotNull(simulcastId, "simulcastId");
        this.simulcastId = simulcastId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSpecificSimulcastOfStreamRequest other = (GetSpecificSimulcastOfStreamRequest) o;
        return 
            Objects.deepEquals(this.streamId, other.streamId) &&
            Objects.deepEquals(this.simulcastId, other.simulcastId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            streamId,
            simulcastId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSpecificSimulcastOfStreamRequest.class,
                "streamId", streamId,
                "simulcastId", simulcastId);
    }
    
    public final static class Builder {
 
        private String streamId;
 
        private String simulcastId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
         */
        public Builder streamId(String streamId) {
            Utils.checkNotNull(streamId, "streamId");
            this.streamId = streamId;
            return this;
        }

        /**
         * When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
         */
        public Builder simulcastId(String simulcastId) {
            Utils.checkNotNull(simulcastId, "simulcastId");
            this.simulcastId = simulcastId;
            return this;
        }
        
        public GetSpecificSimulcastOfStreamRequest build() {
            return new GetSpecificSimulcastOfStreamRequest(
                streamId,
                simulcastId);
        }
    }
}
