/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class GetAllStreamsRequestBuilder {

    private Optional<String> limit = Utils.readDefaultOrConstValue(
                            "limit",
                            "\"10\"",
                            new TypeReference<Optional<String>>() {});
    private Optional<String> offset = Utils.readDefaultOrConstValue(
                            "offset",
                            "\"1\"",
                            new TypeReference<Optional<String>>() {});
    private Optional<? extends GetAllStreamsOrderBy> orderBy = Utils.readDefaultOrConstValue(
                            "orderBy",
                            "\"desc\"",
                            new TypeReference<Optional<? extends GetAllStreamsOrderBy>>() {});
    private final SDKMethodInterfaces.MethodCallGetAllStreams sdk;

    public GetAllStreamsRequestBuilder(SDKMethodInterfaces.MethodCallGetAllStreams sdk) {
        this.sdk = sdk;
    }
                
    public GetAllStreamsRequestBuilder limit(String limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.of(limit);
        return this;
    }

    public GetAllStreamsRequestBuilder limit(Optional<String> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }
                
    public GetAllStreamsRequestBuilder offset(String offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.of(offset);
        return this;
    }

    public GetAllStreamsRequestBuilder offset(Optional<String> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }
                
    public GetAllStreamsRequestBuilder orderBy(GetAllStreamsOrderBy orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.of(orderBy);
        return this;
    }

    public GetAllStreamsRequestBuilder orderBy(Optional<? extends GetAllStreamsOrderBy> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }

    public GetAllStreamsResponse call() throws Exception {
        if (limit == null) {
            limit = _SINGLETON_VALUE_Limit.value();
        }
        if (offset == null) {
            offset = _SINGLETON_VALUE_Offset.value();
        }
        if (orderBy == null) {
            orderBy = _SINGLETON_VALUE_OrderBy.value();
        }
        return sdk.getAllStreams(
            limit,
            offset,
            orderBy);
    }

    private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Limit =
            new LazySingletonValue<>(
                    "limit",
                    "\"10\"",
                    new TypeReference<Optional<String>>() {});

    private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Offset =
            new LazySingletonValue<>(
                    "offset",
                    "\"1\"",
                    new TypeReference<Optional<String>>() {});

    private static final LazySingletonValue<Optional<? extends GetAllStreamsOrderBy>> _SINGLETON_VALUE_OrderBy =
            new LazySingletonValue<>(
                    "orderBy",
                    "\"desc\"",
                    new TypeReference<Optional<? extends GetAllStreamsOrderBy>>() {});
}
