/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.fastpix.sdk.utils.LazySingletonValue;
import io.fastpix.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * PushMediaSettings
 * 
 * <p>Configuration settings for media upload.
 */
public class PushMediaSettings {

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    @JsonProperty("accessPolicy")
    private DirectUploadVideoMediaAccessPolicy accessPolicy;

    /**
     * Start time indicates where encoding should begin within the video file, in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    private Optional<Double> startTime;

    /**
     * End time indicates where encoding should end within the video file, in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    private Optional<Double> endTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputs")
    private Optional<? extends List<Input>> inputs;

    /**
     * Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends DirectUploadVideoMediaMetadata> metadata;

    /**
     * Generates subtitle files for audio/video files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitles")
    private Optional<? extends Subtitles> subtitles;

    /**
     * Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optimizeAudio")
    private Optional<Boolean> optimizeAudio;

    /**
     * Determines the highest quality resolution available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxResolution")
    private Optional<? extends MaxResolution> maxResolution;

    /**
     * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccess")
    private Optional<Boolean> sourceAccess;

    /**
     * Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mp4Support")
    private Optional<? extends Mp4Support> mp4Support;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends Summary> summary;

    /**
     * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chapters")
    private Optional<Boolean> chapters;

    /**
     * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namedEntities")
    private Optional<Boolean> namedEntities;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moderation")
    private Optional<? extends Moderation> moderation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessRestrictions")
    private Optional<? extends DirectUploadVideoMediaAccessRestrictions> accessRestrictions;

    @JsonCreator
    public PushMediaSettings(
            @JsonProperty("accessPolicy") DirectUploadVideoMediaAccessPolicy accessPolicy,
            @JsonProperty("startTime") Optional<Double> startTime,
            @JsonProperty("endTime") Optional<Double> endTime,
            @JsonProperty("inputs") Optional<? extends List<Input>> inputs,
            @JsonProperty("metadata") Optional<? extends DirectUploadVideoMediaMetadata> metadata,
            @JsonProperty("subtitles") Optional<? extends Subtitles> subtitles,
            @JsonProperty("optimizeAudio") Optional<Boolean> optimizeAudio,
            @JsonProperty("maxResolution") Optional<? extends MaxResolution> maxResolution,
            @JsonProperty("sourceAccess") Optional<Boolean> sourceAccess,
            @JsonProperty("mp4Support") Optional<? extends Mp4Support> mp4Support,
            @JsonProperty("summary") Optional<? extends Summary> summary,
            @JsonProperty("chapters") Optional<Boolean> chapters,
            @JsonProperty("namedEntities") Optional<Boolean> namedEntities,
            @JsonProperty("moderation") Optional<? extends Moderation> moderation,
            @JsonProperty("accessRestrictions") Optional<? extends DirectUploadVideoMediaAccessRestrictions> accessRestrictions) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        Utils.checkNotNull(startTime, "startTime");
        Utils.checkNotNull(endTime, "endTime");
        Utils.checkNotNull(inputs, "inputs");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(subtitles, "subtitles");
        Utils.checkNotNull(optimizeAudio, "optimizeAudio");
        Utils.checkNotNull(maxResolution, "maxResolution");
        Utils.checkNotNull(sourceAccess, "sourceAccess");
        Utils.checkNotNull(mp4Support, "mp4Support");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(chapters, "chapters");
        Utils.checkNotNull(namedEntities, "namedEntities");
        Utils.checkNotNull(moderation, "moderation");
        Utils.checkNotNull(accessRestrictions, "accessRestrictions");
        this.accessPolicy = accessPolicy;
        this.startTime = startTime;
        this.endTime = endTime;
        this.inputs = inputs;
        this.metadata = metadata;
        this.subtitles = subtitles;
        this.optimizeAudio = optimizeAudio;
        this.maxResolution = maxResolution;
        this.sourceAccess = sourceAccess;
        this.mp4Support = mp4Support;
        this.summary = summary;
        this.chapters = chapters;
        this.namedEntities = namedEntities;
        this.moderation = moderation;
        this.accessRestrictions = accessRestrictions;
    }
    
    public PushMediaSettings(
            DirectUploadVideoMediaAccessPolicy accessPolicy) {
        this(accessPolicy, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    @JsonIgnore
    public DirectUploadVideoMediaAccessPolicy accessPolicy() {
        return accessPolicy;
    }

    /**
     * Start time indicates where encoding should begin within the video file, in seconds.
     */
    @JsonIgnore
    public Optional<Double> startTime() {
        return startTime;
    }

    /**
     * End time indicates where encoding should end within the video file, in seconds.
     */
    @JsonIgnore
    public Optional<Double> endTime() {
        return endTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Input>> inputs() {
        return (Optional<List<Input>>) inputs;
    }

    /**
     * Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DirectUploadVideoMediaMetadata> metadata() {
        return (Optional<DirectUploadVideoMediaMetadata>) metadata;
    }

    /**
     * Generates subtitle files for audio/video files.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Subtitles> subtitles() {
        return (Optional<Subtitles>) subtitles;
    }

    /**
     * Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
     */
    @JsonIgnore
    public Optional<Boolean> optimizeAudio() {
        return optimizeAudio;
    }

    /**
     * Determines the highest quality resolution available.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MaxResolution> maxResolution() {
        return (Optional<MaxResolution>) maxResolution;
    }

    /**
     * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
     */
    @JsonIgnore
    public Optional<Boolean> sourceAccess() {
        return sourceAccess;
    }

    /**
     * Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Mp4Support> mp4Support() {
        return (Optional<Mp4Support>) mp4Support;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Summary> summary() {
        return (Optional<Summary>) summary;
    }

    /**
     * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
     */
    @JsonIgnore
    public Optional<Boolean> chapters() {
        return chapters;
    }

    /**
     * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
     */
    @JsonIgnore
    public Optional<Boolean> namedEntities() {
        return namedEntities;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Moderation> moderation() {
        return (Optional<Moderation>) moderation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DirectUploadVideoMediaAccessRestrictions> accessRestrictions() {
        return (Optional<DirectUploadVideoMediaAccessRestrictions>) accessRestrictions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    public PushMediaSettings withAccessPolicy(DirectUploadVideoMediaAccessPolicy accessPolicy) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        this.accessPolicy = accessPolicy;
        return this;
    }

    /**
     * Start time indicates where encoding should begin within the video file, in seconds.
     */
    public PushMediaSettings withStartTime(double startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = Optional.ofNullable(startTime);
        return this;
    }

    /**
     * Start time indicates where encoding should begin within the video file, in seconds.
     */
    public PushMediaSettings withStartTime(Optional<Double> startTime) {
        Utils.checkNotNull(startTime, "startTime");
        this.startTime = startTime;
        return this;
    }

    /**
     * End time indicates where encoding should end within the video file, in seconds.
     */
    public PushMediaSettings withEndTime(double endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = Optional.ofNullable(endTime);
        return this;
    }

    /**
     * End time indicates where encoding should end within the video file, in seconds.
     */
    public PushMediaSettings withEndTime(Optional<Double> endTime) {
        Utils.checkNotNull(endTime, "endTime");
        this.endTime = endTime;
        return this;
    }

    public PushMediaSettings withInputs(List<Input> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = Optional.ofNullable(inputs);
        return this;
    }

    public PushMediaSettings withInputs(Optional<? extends List<Input>> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = inputs;
        return this;
    }

    /**
     * Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
     */
    public PushMediaSettings withMetadata(DirectUploadVideoMediaMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
     */
    public PushMediaSettings withMetadata(Optional<? extends DirectUploadVideoMediaMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Generates subtitle files for audio/video files.
     */
    public PushMediaSettings withSubtitles(Subtitles subtitles) {
        Utils.checkNotNull(subtitles, "subtitles");
        this.subtitles = Optional.ofNullable(subtitles);
        return this;
    }

    /**
     * Generates subtitle files for audio/video files.
     */
    public PushMediaSettings withSubtitles(Optional<? extends Subtitles> subtitles) {
        Utils.checkNotNull(subtitles, "subtitles");
        this.subtitles = subtitles;
        return this;
    }

    /**
     * Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
     */
    public PushMediaSettings withOptimizeAudio(boolean optimizeAudio) {
        Utils.checkNotNull(optimizeAudio, "optimizeAudio");
        this.optimizeAudio = Optional.ofNullable(optimizeAudio);
        return this;
    }

    /**
     * Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
     */
    public PushMediaSettings withOptimizeAudio(Optional<Boolean> optimizeAudio) {
        Utils.checkNotNull(optimizeAudio, "optimizeAudio");
        this.optimizeAudio = optimizeAudio;
        return this;
    }

    /**
     * Determines the highest quality resolution available.
     */
    public PushMediaSettings withMaxResolution(MaxResolution maxResolution) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.maxResolution = Optional.ofNullable(maxResolution);
        return this;
    }

    /**
     * Determines the highest quality resolution available.
     */
    public PushMediaSettings withMaxResolution(Optional<? extends MaxResolution> maxResolution) {
        Utils.checkNotNull(maxResolution, "maxResolution");
        this.maxResolution = maxResolution;
        return this;
    }

    /**
     * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
     */
    public PushMediaSettings withSourceAccess(boolean sourceAccess) {
        Utils.checkNotNull(sourceAccess, "sourceAccess");
        this.sourceAccess = Optional.ofNullable(sourceAccess);
        return this;
    }

    /**
     * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
     */
    public PushMediaSettings withSourceAccess(Optional<Boolean> sourceAccess) {
        Utils.checkNotNull(sourceAccess, "sourceAccess");
        this.sourceAccess = sourceAccess;
        return this;
    }

    /**
     * Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
     */
    public PushMediaSettings withMp4Support(Mp4Support mp4Support) {
        Utils.checkNotNull(mp4Support, "mp4Support");
        this.mp4Support = Optional.ofNullable(mp4Support);
        return this;
    }

    /**
     * Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
     */
    public PushMediaSettings withMp4Support(Optional<? extends Mp4Support> mp4Support) {
        Utils.checkNotNull(mp4Support, "mp4Support");
        this.mp4Support = mp4Support;
        return this;
    }

    public PushMediaSettings withSummary(Summary summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public PushMediaSettings withSummary(Optional<? extends Summary> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
     */
    public PushMediaSettings withChapters(boolean chapters) {
        Utils.checkNotNull(chapters, "chapters");
        this.chapters = Optional.ofNullable(chapters);
        return this;
    }

    /**
     * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
     */
    public PushMediaSettings withChapters(Optional<Boolean> chapters) {
        Utils.checkNotNull(chapters, "chapters");
        this.chapters = chapters;
        return this;
    }

    /**
     * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
     */
    public PushMediaSettings withNamedEntities(boolean namedEntities) {
        Utils.checkNotNull(namedEntities, "namedEntities");
        this.namedEntities = Optional.ofNullable(namedEntities);
        return this;
    }

    /**
     * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
     */
    public PushMediaSettings withNamedEntities(Optional<Boolean> namedEntities) {
        Utils.checkNotNull(namedEntities, "namedEntities");
        this.namedEntities = namedEntities;
        return this;
    }

    public PushMediaSettings withModeration(Moderation moderation) {
        Utils.checkNotNull(moderation, "moderation");
        this.moderation = Optional.ofNullable(moderation);
        return this;
    }

    public PushMediaSettings withModeration(Optional<? extends Moderation> moderation) {
        Utils.checkNotNull(moderation, "moderation");
        this.moderation = moderation;
        return this;
    }

    public PushMediaSettings withAccessRestrictions(DirectUploadVideoMediaAccessRestrictions accessRestrictions) {
        Utils.checkNotNull(accessRestrictions, "accessRestrictions");
        this.accessRestrictions = Optional.ofNullable(accessRestrictions);
        return this;
    }

    public PushMediaSettings withAccessRestrictions(Optional<? extends DirectUploadVideoMediaAccessRestrictions> accessRestrictions) {
        Utils.checkNotNull(accessRestrictions, "accessRestrictions");
        this.accessRestrictions = accessRestrictions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PushMediaSettings other = (PushMediaSettings) o;
        return 
            Objects.deepEquals(this.accessPolicy, other.accessPolicy) &&
            Objects.deepEquals(this.startTime, other.startTime) &&
            Objects.deepEquals(this.endTime, other.endTime) &&
            Objects.deepEquals(this.inputs, other.inputs) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.subtitles, other.subtitles) &&
            Objects.deepEquals(this.optimizeAudio, other.optimizeAudio) &&
            Objects.deepEquals(this.maxResolution, other.maxResolution) &&
            Objects.deepEquals(this.sourceAccess, other.sourceAccess) &&
            Objects.deepEquals(this.mp4Support, other.mp4Support) &&
            Objects.deepEquals(this.summary, other.summary) &&
            Objects.deepEquals(this.chapters, other.chapters) &&
            Objects.deepEquals(this.namedEntities, other.namedEntities) &&
            Objects.deepEquals(this.moderation, other.moderation) &&
            Objects.deepEquals(this.accessRestrictions, other.accessRestrictions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessPolicy,
            startTime,
            endTime,
            inputs,
            metadata,
            subtitles,
            optimizeAudio,
            maxResolution,
            sourceAccess,
            mp4Support,
            summary,
            chapters,
            namedEntities,
            moderation,
            accessRestrictions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PushMediaSettings.class,
                "accessPolicy", accessPolicy,
                "startTime", startTime,
                "endTime", endTime,
                "inputs", inputs,
                "metadata", metadata,
                "subtitles", subtitles,
                "optimizeAudio", optimizeAudio,
                "maxResolution", maxResolution,
                "sourceAccess", sourceAccess,
                "mp4Support", mp4Support,
                "summary", summary,
                "chapters", chapters,
                "namedEntities", namedEntities,
                "moderation", moderation,
                "accessRestrictions", accessRestrictions);
    }
    
    public final static class Builder {
 
        private DirectUploadVideoMediaAccessPolicy accessPolicy;
 
        private Optional<Double> startTime = Optional.empty();
 
        private Optional<Double> endTime = Optional.empty();
 
        private Optional<? extends List<Input>> inputs = Optional.empty();
 
        private Optional<? extends DirectUploadVideoMediaMetadata> metadata = Optional.empty();
 
        private Optional<? extends Subtitles> subtitles = Optional.empty();
 
        private Optional<Boolean> optimizeAudio;
 
        private Optional<? extends MaxResolution> maxResolution;
 
        private Optional<Boolean> sourceAccess = Optional.empty();
 
        private Optional<? extends Mp4Support> mp4Support = Optional.empty();
 
        private Optional<? extends Summary> summary = Optional.empty();
 
        private Optional<Boolean> chapters = Optional.empty();
 
        private Optional<Boolean> namedEntities = Optional.empty();
 
        private Optional<? extends Moderation> moderation = Optional.empty();
 
        private Optional<? extends DirectUploadVideoMediaAccessRestrictions> accessRestrictions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Determines if access to the streamed content is kept private or available to all.
         */
        public Builder accessPolicy(DirectUploadVideoMediaAccessPolicy accessPolicy) {
            Utils.checkNotNull(accessPolicy, "accessPolicy");
            this.accessPolicy = accessPolicy;
            return this;
        }

        /**
         * Start time indicates where encoding should begin within the video file, in seconds.
         */
        public Builder startTime(double startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * Start time indicates where encoding should begin within the video file, in seconds.
         */
        public Builder startTime(Optional<Double> startTime) {
            Utils.checkNotNull(startTime, "startTime");
            this.startTime = startTime;
            return this;
        }

        /**
         * End time indicates where encoding should end within the video file, in seconds.
         */
        public Builder endTime(double endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        /**
         * End time indicates where encoding should end within the video file, in seconds.
         */
        public Builder endTime(Optional<Double> endTime) {
            Utils.checkNotNull(endTime, "endTime");
            this.endTime = endTime;
            return this;
        }

        public Builder inputs(List<Input> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = Optional.ofNullable(inputs);
            return this;
        }

        public Builder inputs(Optional<? extends List<Input>> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = inputs;
            return this;
        }

        /**
         * Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
         */
        public Builder metadata(DirectUploadVideoMediaMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Tag a video in "key" : "value" pairs for searchable metadata. Maximum 10 entries, 255 characters each.
         */
        public Builder metadata(Optional<? extends DirectUploadVideoMediaMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Generates subtitle files for audio/video files.
         */
        public Builder subtitles(Subtitles subtitles) {
            Utils.checkNotNull(subtitles, "subtitles");
            this.subtitles = Optional.ofNullable(subtitles);
            return this;
        }

        /**
         * Generates subtitle files for audio/video files.
         */
        public Builder subtitles(Optional<? extends Subtitles> subtitles) {
            Utils.checkNotNull(subtitles, "subtitles");
            this.subtitles = subtitles;
            return this;
        }

        /**
         * Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
         */
        public Builder optimizeAudio(boolean optimizeAudio) {
            Utils.checkNotNull(optimizeAudio, "optimizeAudio");
            this.optimizeAudio = Optional.ofNullable(optimizeAudio);
            return this;
        }

        /**
         * Enhance the quality and volume of the audio track. This is available for pre-recorded content only.
         */
        public Builder optimizeAudio(Optional<Boolean> optimizeAudio) {
            Utils.checkNotNull(optimizeAudio, "optimizeAudio");
            this.optimizeAudio = optimizeAudio;
            return this;
        }

        /**
         * Determines the highest quality resolution available.
         */
        public Builder maxResolution(MaxResolution maxResolution) {
            Utils.checkNotNull(maxResolution, "maxResolution");
            this.maxResolution = Optional.ofNullable(maxResolution);
            return this;
        }

        /**
         * Determines the highest quality resolution available.
         */
        public Builder maxResolution(Optional<? extends MaxResolution> maxResolution) {
            Utils.checkNotNull(maxResolution, "maxResolution");
            this.maxResolution = maxResolution;
            return this;
        }

        /**
         * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
         */
        public Builder sourceAccess(boolean sourceAccess) {
            Utils.checkNotNull(sourceAccess, "sourceAccess");
            this.sourceAccess = Optional.ofNullable(sourceAccess);
            return this;
        }

        /**
         * The sourceAccess parameter determines whether the original media file is accessible. Set to true to enable access or false to restrict it
         */
        public Builder sourceAccess(Optional<Boolean> sourceAccess) {
            Utils.checkNotNull(sourceAccess, "sourceAccess");
            this.sourceAccess = sourceAccess;
            return this;
        }

        /**
         * Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
         */
        public Builder mp4Support(Mp4Support mp4Support) {
            Utils.checkNotNull(mp4Support, "mp4Support");
            this.mp4Support = Optional.ofNullable(mp4Support);
            return this;
        }

        /**
         * Generates MP4 video up to 4K ("capped_4k"), m4a audio only ("audioOnly"), or both for offline viewing.
         */
        public Builder mp4Support(Optional<? extends Mp4Support> mp4Support) {
            Utils.checkNotNull(mp4Support, "mp4Support");
            this.mp4Support = mp4Support;
            return this;
        }

        public Builder summary(Summary summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends Summary> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        /**
         * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
         */
        public Builder chapters(boolean chapters) {
            Utils.checkNotNull(chapters, "chapters");
            this.chapters = Optional.ofNullable(chapters);
            return this;
        }

        /**
         * Enable or disable the chapters feature for the media. Set to `true` to enable chapters or `false` to disable.
         */
        public Builder chapters(Optional<Boolean> chapters) {
            Utils.checkNotNull(chapters, "chapters");
            this.chapters = chapters;
            return this;
        }

        /**
         * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
         */
        public Builder namedEntities(boolean namedEntities) {
            Utils.checkNotNull(namedEntities, "namedEntities");
            this.namedEntities = Optional.ofNullable(namedEntities);
            return this;
        }

        /**
         * Enable or disable named entity extraction. Set to `true` to enable or `false` to disable.
         */
        public Builder namedEntities(Optional<Boolean> namedEntities) {
            Utils.checkNotNull(namedEntities, "namedEntities");
            this.namedEntities = namedEntities;
            return this;
        }

        public Builder moderation(Moderation moderation) {
            Utils.checkNotNull(moderation, "moderation");
            this.moderation = Optional.ofNullable(moderation);
            return this;
        }

        public Builder moderation(Optional<? extends Moderation> moderation) {
            Utils.checkNotNull(moderation, "moderation");
            this.moderation = moderation;
            return this;
        }

        public Builder accessRestrictions(DirectUploadVideoMediaAccessRestrictions accessRestrictions) {
            Utils.checkNotNull(accessRestrictions, "accessRestrictions");
            this.accessRestrictions = Optional.ofNullable(accessRestrictions);
            return this;
        }

        public Builder accessRestrictions(Optional<? extends DirectUploadVideoMediaAccessRestrictions> accessRestrictions) {
            Utils.checkNotNull(accessRestrictions, "accessRestrictions");
            this.accessRestrictions = accessRestrictions;
            return this;
        }
        
        public PushMediaSettings build() {
            if (optimizeAudio == null) {
                optimizeAudio = _SINGLETON_VALUE_OptimizeAudio.value();
            }
            if (maxResolution == null) {
                maxResolution = _SINGLETON_VALUE_MaxResolution.value();
            }
            return new PushMediaSettings(
                accessPolicy,
                startTime,
                endTime,
                inputs,
                metadata,
                subtitles,
                optimizeAudio,
                maxResolution,
                sourceAccess,
                mp4Support,
                summary,
                chapters,
                namedEntities,
                moderation,
                accessRestrictions);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_OptimizeAudio =
                new LazySingletonValue<>(
                        "optimizeAudio",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends MaxResolution>> _SINGLETON_VALUE_MaxResolution =
                new LazySingletonValue<>(
                        "maxResolution",
                        "\"1080p\"",
                        new TypeReference<Optional<? extends MaxResolution>>() {});
    }
}
