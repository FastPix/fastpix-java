/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.fastpix.sdk.utils.SpeakeasyMetadata;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class GetLiveStreamByIdRequest {

    /**
     * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=streamId")
    private String streamId;

    @JsonCreator
    public GetLiveStreamByIdRequest(
            String streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = streamId;
    }

    /**
     * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
     */
    @JsonIgnore
    public String streamId() {
        return streamId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
     */
    public GetLiveStreamByIdRequest withStreamId(String streamId) {
        Utils.checkNotNull(streamId, "streamId");
        this.streamId = streamId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLiveStreamByIdRequest other = (GetLiveStreamByIdRequest) o;
        return 
            Objects.deepEquals(this.streamId, other.streamId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            streamId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLiveStreamByIdRequest.class,
                "streamId", streamId);
    }
    
    public final static class Builder {
 
        private String streamId;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Upon creating a new live stream, FastPix assigns a unique identifier to the stream.
         */
        public Builder streamId(String streamId) {
            Utils.checkNotNull(streamId, "streamId");
            this.streamId = streamId;
            return this;
        }
        
        public GetLiveStreamByIdRequest build() {
            return new GetLiveStreamByIdRequest(
                streamId);
        }
    }
}
