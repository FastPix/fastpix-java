/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import io.fastpix.sdk.models.components.CreateLiveStreamRequest;
import io.fastpix.sdk.models.components.CreateMediaRequest;
import io.fastpix.sdk.models.components.PatchLiveStreamRequest;
import io.fastpix.sdk.models.components.PlaybackIdRequest;
import io.fastpix.sdk.models.components.SimulcastRequest;
import io.fastpix.sdk.models.components.SimulcastUpdateRequest;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;

public class SDKMethodInterfaces {

    public interface MethodCallCreateNewStream {
        CreateNewStreamResponse createNewStream(
            Optional<? extends CreateLiveStreamRequest> request) throws Exception;
    }

    public interface MethodCallGetAllStreams {
        GetAllStreamsResponse getAllStreams(
            Optional<String> limit,
            Optional<String> offset,
            Optional<? extends GetAllStreamsOrderBy> orderBy) throws Exception;
    }

    public interface MethodCallGetLiveStreamById {
        GetLiveStreamByIdResponse getLiveStreamById(
            String streamId) throws Exception;
    }

    public interface MethodCallDeleteLiveStream {
        DeleteLiveStreamResponse deleteLiveStream(
            String streamId) throws Exception;
    }

    public interface MethodCallUpdateLiveStream {
        UpdateLiveStreamResponse updateLiveStream(
            String streamId,
            Optional<? extends PatchLiveStreamRequest> patchLiveStreamRequest) throws Exception;
    }

    public interface MethodCallCreatePlaybackIdOfStream {
        CreatePlaybackIdOfStreamResponse createPlaybackIdOfStream(
            String streamId,
            Optional<? extends PlaybackIdRequest> playbackIdRequest) throws Exception;
    }

    public interface MethodCallDeletePlaybackIdOfStream {
        DeletePlaybackIdOfStreamResponse deletePlaybackIdOfStream(
            String streamId,
            String playbackId) throws Exception;
    }

    public interface MethodCallGetLiveStreamPlaybackId {
        GetLiveStreamPlaybackIdResponse getLiveStreamPlaybackId(
            String streamId,
            String playbackId) throws Exception;
    }

    public interface MethodCallCreateMediaPlaybackId {
        CreateMediaPlaybackIdResponse createMediaPlaybackId(
            String mediaId,
            Optional<? extends CreateMediaPlaybackIdRequestBody> requestBody) throws Exception;
    }

    public interface MethodCallDeleteMediaPlaybackId {
        DeleteMediaPlaybackIdResponse deleteMediaPlaybackId(
            String mediaId,
            String playbackId) throws Exception;
    }

    public interface MethodCallCreateSimulcastOfStream {
        CreateSimulcastOfStreamResponse createSimulcastOfStream(
            String streamId,
            Optional<? extends SimulcastRequest> simulcastRequest) throws Exception;
    }

    public interface MethodCallDeleteSimulcastOfStream {
        DeleteSimulcastOfStreamResponse deleteSimulcastOfStream(
            String streamId,
            String simulcastId) throws Exception;
    }

    public interface MethodCallGetSpecificSimulcastOfStream {
        GetSpecificSimulcastOfStreamResponse getSpecificSimulcastOfStream(
            String streamId,
            String simulcastId) throws Exception;
    }

    public interface MethodCallUpdateSpecificSimulcastOfStream {
        UpdateSpecificSimulcastOfStreamResponse updateSpecificSimulcastOfStream(
            String streamId,
            String simulcastId,
            Optional<? extends SimulcastUpdateRequest> simulcastUpdateRequest) throws Exception;
    }

    public interface MethodCallCreateMedia {
        CreateMediaResponse createMedia(
            Optional<? extends CreateMediaRequest> request) throws Exception;
    }

    public interface MethodCallDirectUploadVideoMedia {
        DirectUploadVideoMediaResponse directUploadVideoMedia(
            Optional<? extends DirectUploadVideoMediaRequest> request) throws Exception;
    }

    public interface MethodCallListMedia {
        ListMediaResponse listMedia(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<? extends ListMediaOrderBy> orderBy) throws Exception;
    }

    public interface MethodCallGetMedia {
        GetMediaResponse getMedia(
            String mediaId) throws Exception;
    }

    public interface MethodCallUpdatedMedia {
        UpdatedMediaResponse updatedMedia(
            String mediaId,
            Optional<? extends UpdatedMediaRequestBody> requestBody) throws Exception;
    }

    public interface MethodCallDeleteMedia {
        DeleteMediaResponse deleteMedia(
            String mediaId) throws Exception;
    }

    public interface MethodCallRetrieveMediaInputInfo {
        RetrieveMediaInputInfoResponse retrieveMediaInputInfo(
            String mediaId) throws Exception;
    }
}
