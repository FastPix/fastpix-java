/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.models.components.PlaybackId;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * Data
 * 
 * <p>Displays the result of the request.
 */
public class Data {

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playbackIds")
    private Optional<? extends List<PlaybackId>> playbackIds;

    @JsonCreator
    public Data(
            @JsonProperty("playbackIds") Optional<? extends List<PlaybackId>> playbackIds) {
        Utils.checkNotNull(playbackIds, "playbackIds");
        this.playbackIds = playbackIds;
    }
    
    public Data() {
        this(Optional.empty());
    }

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PlaybackId>> playbackIds() {
        return (Optional<List<PlaybackId>>) playbackIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    public Data withPlaybackIds(List<PlaybackId> playbackIds) {
        Utils.checkNotNull(playbackIds, "playbackIds");
        this.playbackIds = Optional.ofNullable(playbackIds);
        return this;
    }

    /**
     * A collection of Playback ID objects utilized for crafting HLS playback URLs.
     */
    public Data withPlaybackIds(Optional<? extends List<PlaybackId>> playbackIds) {
        Utils.checkNotNull(playbackIds, "playbackIds");
        this.playbackIds = playbackIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Data other = (Data) o;
        return 
            Objects.deepEquals(this.playbackIds, other.playbackIds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            playbackIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Data.class,
                "playbackIds", playbackIds);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<PlaybackId>> playbackIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A collection of Playback ID objects utilized for crafting HLS playback URLs.
         */
        public Builder playbackIds(List<PlaybackId> playbackIds) {
            Utils.checkNotNull(playbackIds, "playbackIds");
            this.playbackIds = Optional.ofNullable(playbackIds);
            return this;
        }

        /**
         * A collection of Playback ID objects utilized for crafting HLS playback URLs.
         */
        public Builder playbackIds(Optional<? extends List<PlaybackId>> playbackIds) {
            Utils.checkNotNull(playbackIds, "playbackIds");
            this.playbackIds = playbackIds;
            return this;
        }
        
        public Data build() {
            return new Data(
                playbackIds);
        }
    }
}
