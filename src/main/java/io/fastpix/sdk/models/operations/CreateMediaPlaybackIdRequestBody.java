/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * CreateMediaPlaybackIdRequestBody
 * 
 * <p>Request body for creating playback id for an media
 */
public class CreateMediaPlaybackIdRequestBody {

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    @JsonProperty("accessPolicy")
    private CreateMediaPlaybackIdAccessPolicy accessPolicy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessRestrictions")
    private Optional<? extends CreateMediaPlaybackIdAccessRestrictions> accessRestrictions;

    @JsonCreator
    public CreateMediaPlaybackIdRequestBody(
            @JsonProperty("accessPolicy") CreateMediaPlaybackIdAccessPolicy accessPolicy,
            @JsonProperty("accessRestrictions") Optional<? extends CreateMediaPlaybackIdAccessRestrictions> accessRestrictions) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        Utils.checkNotNull(accessRestrictions, "accessRestrictions");
        this.accessPolicy = accessPolicy;
        this.accessRestrictions = accessRestrictions;
    }
    
    public CreateMediaPlaybackIdRequestBody(
            CreateMediaPlaybackIdAccessPolicy accessPolicy) {
        this(accessPolicy, Optional.empty());
    }

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    @JsonIgnore
    public CreateMediaPlaybackIdAccessPolicy accessPolicy() {
        return accessPolicy;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateMediaPlaybackIdAccessRestrictions> accessRestrictions() {
        return (Optional<CreateMediaPlaybackIdAccessRestrictions>) accessRestrictions;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Determines if access to the streamed content is kept private or available to all.
     */
    public CreateMediaPlaybackIdRequestBody withAccessPolicy(CreateMediaPlaybackIdAccessPolicy accessPolicy) {
        Utils.checkNotNull(accessPolicy, "accessPolicy");
        this.accessPolicy = accessPolicy;
        return this;
    }

    public CreateMediaPlaybackIdRequestBody withAccessRestrictions(CreateMediaPlaybackIdAccessRestrictions accessRestrictions) {
        Utils.checkNotNull(accessRestrictions, "accessRestrictions");
        this.accessRestrictions = Optional.ofNullable(accessRestrictions);
        return this;
    }

    public CreateMediaPlaybackIdRequestBody withAccessRestrictions(Optional<? extends CreateMediaPlaybackIdAccessRestrictions> accessRestrictions) {
        Utils.checkNotNull(accessRestrictions, "accessRestrictions");
        this.accessRestrictions = accessRestrictions;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMediaPlaybackIdRequestBody other = (CreateMediaPlaybackIdRequestBody) o;
        return 
            Objects.deepEquals(this.accessPolicy, other.accessPolicy) &&
            Objects.deepEquals(this.accessRestrictions, other.accessRestrictions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessPolicy,
            accessRestrictions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMediaPlaybackIdRequestBody.class,
                "accessPolicy", accessPolicy,
                "accessRestrictions", accessRestrictions);
    }
    
    public final static class Builder {
 
        private CreateMediaPlaybackIdAccessPolicy accessPolicy;
 
        private Optional<? extends CreateMediaPlaybackIdAccessRestrictions> accessRestrictions = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Determines if access to the streamed content is kept private or available to all.
         */
        public Builder accessPolicy(CreateMediaPlaybackIdAccessPolicy accessPolicy) {
            Utils.checkNotNull(accessPolicy, "accessPolicy");
            this.accessPolicy = accessPolicy;
            return this;
        }

        public Builder accessRestrictions(CreateMediaPlaybackIdAccessRestrictions accessRestrictions) {
            Utils.checkNotNull(accessRestrictions, "accessRestrictions");
            this.accessRestrictions = Optional.ofNullable(accessRestrictions);
            return this;
        }

        public Builder accessRestrictions(Optional<? extends CreateMediaPlaybackIdAccessRestrictions> accessRestrictions) {
            Utils.checkNotNull(accessRestrictions, "accessRestrictions");
            this.accessRestrictions = accessRestrictions;
            return this;
        }
        
        public CreateMediaPlaybackIdRequestBody build() {
            return new CreateMediaPlaybackIdRequestBody(
                accessPolicy,
                accessRestrictions);
        }
    }
}
