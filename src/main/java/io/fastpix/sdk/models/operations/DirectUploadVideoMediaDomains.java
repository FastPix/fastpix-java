/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class DirectUploadVideoMediaDomains {

    /**
     * Specifies the default access policy for domains. 
     * If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list. 
     * If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPolicy")
    private Optional<? extends DirectUploadVideoMediaDomainsDefaultPolicy> defaultPolicy;

    /**
     * A list of domain names or patterns that are explicitly allowed access. 
     * This list is only effective when the `defaultPolicy` is set to `deny`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow")
    private Optional<? extends List<String>> allow;

    /**
     * A list of domain names or patterns that are explicitly denied access. 
     * This list is only effective when the `defaultPolicy` is set to `allow`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deny")
    private Optional<? extends List<String>> deny;

    @JsonCreator
    public DirectUploadVideoMediaDomains(
            @JsonProperty("defaultPolicy") Optional<? extends DirectUploadVideoMediaDomainsDefaultPolicy> defaultPolicy,
            @JsonProperty("allow") Optional<? extends List<String>> allow,
            @JsonProperty("deny") Optional<? extends List<String>> deny) {
        Utils.checkNotNull(defaultPolicy, "defaultPolicy");
        Utils.checkNotNull(allow, "allow");
        Utils.checkNotNull(deny, "deny");
        this.defaultPolicy = defaultPolicy;
        this.allow = allow;
        this.deny = deny;
    }
    
    public DirectUploadVideoMediaDomains() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Specifies the default access policy for domains. 
     * If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list. 
     * If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DirectUploadVideoMediaDomainsDefaultPolicy> defaultPolicy() {
        return (Optional<DirectUploadVideoMediaDomainsDefaultPolicy>) defaultPolicy;
    }

    /**
     * A list of domain names or patterns that are explicitly allowed access. 
     * This list is only effective when the `defaultPolicy` is set to `deny`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> allow() {
        return (Optional<List<String>>) allow;
    }

    /**
     * A list of domain names or patterns that are explicitly denied access. 
     * This list is only effective when the `defaultPolicy` is set to `allow`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> deny() {
        return (Optional<List<String>>) deny;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Specifies the default access policy for domains. 
     * If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list. 
     * If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
     */
    public DirectUploadVideoMediaDomains withDefaultPolicy(DirectUploadVideoMediaDomainsDefaultPolicy defaultPolicy) {
        Utils.checkNotNull(defaultPolicy, "defaultPolicy");
        this.defaultPolicy = Optional.ofNullable(defaultPolicy);
        return this;
    }

    /**
     * Specifies the default access policy for domains. 
     * If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list. 
     * If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
     */
    public DirectUploadVideoMediaDomains withDefaultPolicy(Optional<? extends DirectUploadVideoMediaDomainsDefaultPolicy> defaultPolicy) {
        Utils.checkNotNull(defaultPolicy, "defaultPolicy");
        this.defaultPolicy = defaultPolicy;
        return this;
    }

    /**
     * A list of domain names or patterns that are explicitly allowed access. 
     * This list is only effective when the `defaultPolicy` is set to `deny`.
     */
    public DirectUploadVideoMediaDomains withAllow(List<String> allow) {
        Utils.checkNotNull(allow, "allow");
        this.allow = Optional.ofNullable(allow);
        return this;
    }

    /**
     * A list of domain names or patterns that are explicitly allowed access. 
     * This list is only effective when the `defaultPolicy` is set to `deny`.
     */
    public DirectUploadVideoMediaDomains withAllow(Optional<? extends List<String>> allow) {
        Utils.checkNotNull(allow, "allow");
        this.allow = allow;
        return this;
    }

    /**
     * A list of domain names or patterns that are explicitly denied access. 
     * This list is only effective when the `defaultPolicy` is set to `allow`.
     */
    public DirectUploadVideoMediaDomains withDeny(List<String> deny) {
        Utils.checkNotNull(deny, "deny");
        this.deny = Optional.ofNullable(deny);
        return this;
    }

    /**
     * A list of domain names or patterns that are explicitly denied access. 
     * This list is only effective when the `defaultPolicy` is set to `allow`.
     */
    public DirectUploadVideoMediaDomains withDeny(Optional<? extends List<String>> deny) {
        Utils.checkNotNull(deny, "deny");
        this.deny = deny;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectUploadVideoMediaDomains other = (DirectUploadVideoMediaDomains) o;
        return 
            Objects.deepEquals(this.defaultPolicy, other.defaultPolicy) &&
            Objects.deepEquals(this.allow, other.allow) &&
            Objects.deepEquals(this.deny, other.deny);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            defaultPolicy,
            allow,
            deny);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DirectUploadVideoMediaDomains.class,
                "defaultPolicy", defaultPolicy,
                "allow", allow,
                "deny", deny);
    }
    
    public final static class Builder {
 
        private Optional<? extends DirectUploadVideoMediaDomainsDefaultPolicy> defaultPolicy = Optional.empty();
 
        private Optional<? extends List<String>> allow = Optional.empty();
 
        private Optional<? extends List<String>> deny = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specifies the default access policy for domains. 
         * If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list. 
         * If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
         */
        public Builder defaultPolicy(DirectUploadVideoMediaDomainsDefaultPolicy defaultPolicy) {
            Utils.checkNotNull(defaultPolicy, "defaultPolicy");
            this.defaultPolicy = Optional.ofNullable(defaultPolicy);
            return this;
        }

        /**
         * Specifies the default access policy for domains. 
         * If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list. 
         * If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
         */
        public Builder defaultPolicy(Optional<? extends DirectUploadVideoMediaDomainsDefaultPolicy> defaultPolicy) {
            Utils.checkNotNull(defaultPolicy, "defaultPolicy");
            this.defaultPolicy = defaultPolicy;
            return this;
        }

        /**
         * A list of domain names or patterns that are explicitly allowed access. 
         * This list is only effective when the `defaultPolicy` is set to `deny`.
         */
        public Builder allow(List<String> allow) {
            Utils.checkNotNull(allow, "allow");
            this.allow = Optional.ofNullable(allow);
            return this;
        }

        /**
         * A list of domain names or patterns that are explicitly allowed access. 
         * This list is only effective when the `defaultPolicy` is set to `deny`.
         */
        public Builder allow(Optional<? extends List<String>> allow) {
            Utils.checkNotNull(allow, "allow");
            this.allow = allow;
            return this;
        }

        /**
         * A list of domain names or patterns that are explicitly denied access. 
         * This list is only effective when the `defaultPolicy` is set to `allow`.
         */
        public Builder deny(List<String> deny) {
            Utils.checkNotNull(deny, "deny");
            this.deny = Optional.ofNullable(deny);
            return this;
        }

        /**
         * A list of domain names or patterns that are explicitly denied access. 
         * This list is only effective when the `defaultPolicy` is set to `allow`.
         */
        public Builder deny(Optional<? extends List<String>> deny) {
            Utils.checkNotNull(deny, "deny");
            this.deny = deny;
            return this;
        }
        
        public DirectUploadVideoMediaDomains build() {
            return new DirectUploadVideoMediaDomains(
                defaultPolicy,
                allow,
                deny);
        }
    }
}
