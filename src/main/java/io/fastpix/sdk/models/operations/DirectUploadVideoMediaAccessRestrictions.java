/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class DirectUploadVideoMediaAccessRestrictions {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains")
    private Optional<? extends DirectUploadVideoMediaDomains> domains;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgents")
    private Optional<? extends DirectUploadVideoMediaUserAgents> userAgents;

    @JsonCreator
    public DirectUploadVideoMediaAccessRestrictions(
            @JsonProperty("domains") Optional<? extends DirectUploadVideoMediaDomains> domains,
            @JsonProperty("userAgents") Optional<? extends DirectUploadVideoMediaUserAgents> userAgents) {
        Utils.checkNotNull(domains, "domains");
        Utils.checkNotNull(userAgents, "userAgents");
        this.domains = domains;
        this.userAgents = userAgents;
    }
    
    public DirectUploadVideoMediaAccessRestrictions() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DirectUploadVideoMediaDomains> domains() {
        return (Optional<DirectUploadVideoMediaDomains>) domains;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DirectUploadVideoMediaUserAgents> userAgents() {
        return (Optional<DirectUploadVideoMediaUserAgents>) userAgents;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public DirectUploadVideoMediaAccessRestrictions withDomains(DirectUploadVideoMediaDomains domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = Optional.ofNullable(domains);
        return this;
    }

    public DirectUploadVideoMediaAccessRestrictions withDomains(Optional<? extends DirectUploadVideoMediaDomains> domains) {
        Utils.checkNotNull(domains, "domains");
        this.domains = domains;
        return this;
    }

    public DirectUploadVideoMediaAccessRestrictions withUserAgents(DirectUploadVideoMediaUserAgents userAgents) {
        Utils.checkNotNull(userAgents, "userAgents");
        this.userAgents = Optional.ofNullable(userAgents);
        return this;
    }

    public DirectUploadVideoMediaAccessRestrictions withUserAgents(Optional<? extends DirectUploadVideoMediaUserAgents> userAgents) {
        Utils.checkNotNull(userAgents, "userAgents");
        this.userAgents = userAgents;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DirectUploadVideoMediaAccessRestrictions other = (DirectUploadVideoMediaAccessRestrictions) o;
        return 
            Objects.deepEquals(this.domains, other.domains) &&
            Objects.deepEquals(this.userAgents, other.userAgents);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            domains,
            userAgents);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DirectUploadVideoMediaAccessRestrictions.class,
                "domains", domains,
                "userAgents", userAgents);
    }
    
    public final static class Builder {
 
        private Optional<? extends DirectUploadVideoMediaDomains> domains = Optional.empty();
 
        private Optional<? extends DirectUploadVideoMediaUserAgents> userAgents = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder domains(DirectUploadVideoMediaDomains domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = Optional.ofNullable(domains);
            return this;
        }

        public Builder domains(Optional<? extends DirectUploadVideoMediaDomains> domains) {
            Utils.checkNotNull(domains, "domains");
            this.domains = domains;
            return this;
        }

        public Builder userAgents(DirectUploadVideoMediaUserAgents userAgents) {
            Utils.checkNotNull(userAgents, "userAgents");
            this.userAgents = Optional.ofNullable(userAgents);
            return this;
        }

        public Builder userAgents(Optional<? extends DirectUploadVideoMediaUserAgents> userAgents) {
            Utils.checkNotNull(userAgents, "userAgents");
            this.userAgents = userAgents;
            return this;
        }
        
        public DirectUploadVideoMediaAccessRestrictions build() {
            return new DirectUploadVideoMediaAccessRestrictions(
                domains,
                userAgents);
        }
    }
}
