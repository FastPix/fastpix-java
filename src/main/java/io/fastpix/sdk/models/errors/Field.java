/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Field {

    /**
     * Displays the specific field associated with the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field")
    private Optional<String> field;

    /**
     * A descriptive message providing more details for the error
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonCreator
    public Field(
            @JsonProperty("field") Optional<String> field,
            @JsonProperty("message") Optional<String> message) {
        Utils.checkNotNull(field, "field");
        Utils.checkNotNull(message, "message");
        this.field = field;
        this.message = message;
    }
    
    public Field() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Displays the specific field associated with the error.
     */
    @JsonIgnore
    public Optional<String> field() {
        return field;
    }

    /**
     * A descriptive message providing more details for the error
     */
    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Displays the specific field associated with the error.
     */
    public Field withField(String field) {
        Utils.checkNotNull(field, "field");
        this.field = Optional.ofNullable(field);
        return this;
    }

    /**
     * Displays the specific field associated with the error.
     */
    public Field withField(Optional<String> field) {
        Utils.checkNotNull(field, "field");
        this.field = field;
        return this;
    }

    /**
     * A descriptive message providing more details for the error
     */
    public Field withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * A descriptive message providing more details for the error
     */
    public Field withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Field other = (Field) o;
        return 
            Objects.deepEquals(this.field, other.field) &&
            Objects.deepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            field,
            message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Field.class,
                "field", field,
                "message", message);
    }
    
    public final static class Builder {
 
        private Optional<String> field = Optional.empty();
 
        private Optional<String> message = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Displays the specific field associated with the error.
         */
        public Builder field(String field) {
            Utils.checkNotNull(field, "field");
            this.field = Optional.ofNullable(field);
            return this;
        }

        /**
         * Displays the specific field associated with the error.
         */
        public Builder field(Optional<String> field) {
            Utils.checkNotNull(field, "field");
            this.field = field;
            return this;
        }

        /**
         * A descriptive message providing more details for the error
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * A descriptive message providing more details for the error
         */
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }
        
        public Field build() {
            return new Field(
                field,
                message);
        }
    }
}
