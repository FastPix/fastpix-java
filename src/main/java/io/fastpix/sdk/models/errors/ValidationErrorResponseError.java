/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ValidationErrorResponseError
 * 
 * <p>Returns the problem that has occured
 */
public class ValidationErrorResponseError {

    /**
     * An error code indicating the type of the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<Long> code;

    /**
     * A descriptive message providing more details for the error
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    /**
     * It is an array of objects, where each object contains information about a specific field and a corresponding error message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends List<Field>> fields;

    @JsonCreator
    public ValidationErrorResponseError(
            @JsonProperty("code") Optional<Long> code,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("fields") Optional<? extends List<Field>> fields) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(fields, "fields");
        this.code = code;
        this.message = message;
        this.fields = fields;
    }
    
    public ValidationErrorResponseError() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * An error code indicating the type of the error.
     */
    @JsonIgnore
    public Optional<Long> code() {
        return code;
    }

    /**
     * A descriptive message providing more details for the error
     */
    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    /**
     * It is an array of objects, where each object contains information about a specific field and a corresponding error message.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Field>> fields() {
        return (Optional<List<Field>>) fields;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * An error code indicating the type of the error.
     */
    public ValidationErrorResponseError withCode(long code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * An error code indicating the type of the error.
     */
    public ValidationErrorResponseError withCode(Optional<Long> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * A descriptive message providing more details for the error
     */
    public ValidationErrorResponseError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * A descriptive message providing more details for the error
     */
    public ValidationErrorResponseError withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * It is an array of objects, where each object contains information about a specific field and a corresponding error message.
     */
    public ValidationErrorResponseError withFields(List<Field> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    /**
     * It is an array of objects, where each object contains information about a specific field and a corresponding error message.
     */
    public ValidationErrorResponseError withFields(Optional<? extends List<Field>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ValidationErrorResponseError other = (ValidationErrorResponseError) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.fields, other.fields);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            message,
            fields);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ValidationErrorResponseError.class,
                "code", code,
                "message", message,
                "fields", fields);
    }
    
    public final static class Builder {
 
        private Optional<Long> code = Optional.empty();
 
        private Optional<String> message = Optional.empty();
 
        private Optional<? extends List<Field>> fields = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An error code indicating the type of the error.
         */
        public Builder code(long code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * An error code indicating the type of the error.
         */
        public Builder code(Optional<Long> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * A descriptive message providing more details for the error
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * A descriptive message providing more details for the error
         */
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * It is an array of objects, where each object contains information about a specific field and a corresponding error message.
         */
        public Builder fields(List<Field> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * It is an array of objects, where each object contains information about a specific field and a corresponding error message.
         */
        public Builder fields(Optional<? extends List<Field>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }
        
        public ValidationErrorResponseError build() {
            return new ValidationErrorResponseError(
                code,
                message,
                fields);
        }
    }
}
