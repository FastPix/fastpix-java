/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package io.fastpix.sdk.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.fastpix.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * BadRequestError
 * 
 * <p>Displays details about the reasons behind the request's failure.
 */
public class BadRequestError {

    /**
     * Displays the error code indicating the type of the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<Double> code;

    /**
     * A descriptive message providing more details for the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    /**
     * A detailed explanation of the possible causes for the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public BadRequestError(
            @JsonProperty("code") Optional<Double> code,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(description, "description");
        this.code = code;
        this.message = message;
        this.description = description;
    }
    
    public BadRequestError() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Displays the error code indicating the type of the error.
     */
    @JsonIgnore
    public Optional<Double> code() {
        return code;
    }

    /**
     * A descriptive message providing more details for the error.
     */
    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    /**
     * A detailed explanation of the possible causes for the error.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Displays the error code indicating the type of the error.
     */
    public BadRequestError withCode(double code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * Displays the error code indicating the type of the error.
     */
    public BadRequestError withCode(Optional<Double> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * A descriptive message providing more details for the error.
     */
    public BadRequestError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * A descriptive message providing more details for the error.
     */
    public BadRequestError withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * A detailed explanation of the possible causes for the error.
     */
    public BadRequestError withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A detailed explanation of the possible causes for the error.
     */
    public BadRequestError withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BadRequestError other = (BadRequestError) o;
        return 
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            code,
            message,
            description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BadRequestError.class,
                "code", code,
                "message", message,
                "description", description);
    }
    
    public final static class Builder {
 
        private Optional<Double> code = Optional.empty();
 
        private Optional<String> message = Optional.empty();
 
        private Optional<String> description = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Displays the error code indicating the type of the error.
         */
        public Builder code(double code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * Displays the error code indicating the type of the error.
         */
        public Builder code(Optional<Double> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * A descriptive message providing more details for the error.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * A descriptive message providing more details for the error.
         */
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * A detailed explanation of the possible causes for the error.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A detailed explanation of the possible causes for the error.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }
        
        public BadRequestError build() {
            return new BadRequestError(
                code,
                message,
                description);
        }
    }
}
